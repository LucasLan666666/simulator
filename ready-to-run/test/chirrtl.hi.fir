FIRRTL version 4.0.0
circuit ChirrtlSRAMTemplate :
  module ChirrtlSRAMTemplate : @[build/NutShell.fir.opt.mlir 3:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 3:44]
    input reset : Reset @[build/NutShell.fir.opt.mlir 3:70]
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9> } }, flip resp : { data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] } }, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } } } } } @[build/NutShell.fir.opt.mlir 3:97]

    smem array : UInt<73>[1][512], undefined @[build/NutShell.fir.opt.mlir 24:16]
    wire resetState : UInt<1> @[build/NutShell.fir.opt.mlir 28:21]
    connect resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 31:7]
    wire resetSet : UInt @[build/NutShell.fir.opt.mlir 32:19]
    connect resetSet, UInt<1>(0) @[build/NutShell.fir.opt.mlir 33:7]
    regreset _resetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 35:22]
    regreset _resetSet : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 37:20]
    wire resetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 38:22]
    connect resetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 40:7]
    when _resetState : @[build/NutShell.fir.opt.mlir 42:7]
      node wrap_wrap = eq(_resetSet, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 44:22]
      node _wrap_value_T = add(_resetSet, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 46:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 48:28]
      connect _resetSet, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 49:9]
      connect resetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 50:9]
    when resetFinish : @[build/NutShell.fir.opt.mlir 52:7]
      connect _resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 54:9]
    connect resetState, _resetState @[build/NutShell.fir.opt.mlir 56:7]
    connect resetSet, _resetSet @[build/NutShell.fir.opt.mlir 57:7]
    node wen = or(io.w.req.valid, resetState) @[build/NutShell.fir.opt.mlir 59:14]
    node _realRen_T = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 61:21]
    node realRen = and(io.r.req.valid, _realRen_T) @[build/NutShell.fir.opt.mlir 63:18]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[build/NutShell.fir.opt.mlir 65:17]
    wire _wdataword_WIRE : UInt<73> @[build/NutShell.fir.opt.mlir 66:26]
    connect _wdataword_WIRE, pad(UInt<1>(0), 73) @[build/NutShell.fir.opt.mlir 69:7]
    node wdataword_lo = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[build/NutShell.fir.opt.mlir 71:23]
    node wdataword_hi_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[build/NutShell.fir.opt.mlir 73:26]
    node wdataword_hi = cat(wdataword_hi_hi, io.w.req.bits.data.target) @[build/NutShell.fir.opt.mlir 75:23]
    node _wdataword_T = cat(wdataword_hi, wdataword_lo) @[build/NutShell.fir.opt.mlir 77:23]
    node wdataword = mux(resetState, _wdataword_WIRE, _wdataword_T) @[build/NutShell.fir.opt.mlir 79:20]
    node waymask = mux(resetState, UInt<1>(1), UInt<1>(1)) @[build/NutShell.fir.opt.mlir 81:18]
    wire wdata : UInt<73>[1] @[build/NutShell.fir.opt.mlir 82:16]
    connect wdata[0], wdataword @[build/NutShell.fir.opt.mlir 84:7]
    when wen : @[build/NutShell.fir.opt.mlir 85:7]
      node _T = bits(waymask, 0, 0) @[build/NutShell.fir.opt.mlir 87:15]
      node _T_1 = or(setIdx, UInt<9>(0)) @[build/NutShell.fir.opt.mlir 89:17]
      node _T_2 = bits(_T_1, 8, 0) @[build/NutShell.fir.opt.mlir 91:17]
      write mport MPORT = array[_T_2], clock @[build/NutShell.fir.opt.mlir 92:9]
      when _T : @[build/NutShell.fir.opt.mlir 93:9]
        connect MPORT[0], wdata[0] @[build/NutShell.fir.opt.mlir 94:11]
    wire _rdata_WIRE : UInt<9> @[build/NutShell.fir.opt.mlir 97:22]
    invalidate _rdata_WIRE @[build/NutShell.fir.opt.mlir 99:7]
    when realRen : @[build/NutShell.fir.opt.mlir 100:7]
      connect _rdata_WIRE, io.r.req.bits.setIdx @[build/NutShell.fir.opt.mlir 101:9]
      read mport rdata_MPORT = array[_rdata_WIRE], clock @[build/NutShell.fir.opt.mlir 102:9]
    reg rdata_REG : UInt<1>, clock @[build/NutShell.fir.opt.mlir 104:20]
    connect rdata_REG, realRen @[build/NutShell.fir.opt.mlir 105:7]
    wire _rdata_WIRE_1 : UInt<73>[1] @[build/NutShell.fir.opt.mlir 106:24]
    connect _rdata_WIRE_1[0], UInt<73>(0) @[build/NutShell.fir.opt.mlir 110:7]
    regreset rdata_r : UInt<73>[1], clock, reset, _rdata_WIRE_1 @[build/NutShell.fir.opt.mlir 111:18]
    when rdata_REG : @[build/NutShell.fir.opt.mlir 112:7]
      connect rdata_r, rdata_MPORT @[build/NutShell.fir.opt.mlir 113:9]
    node _rdata_T = mux(rdata_REG, rdata_MPORT, rdata_r) @[build/NutShell.fir.opt.mlir 116:19]
    wire rdata_0 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 118:18]
    wire _rdata_WIRE_2 : UInt<73> @[build/NutShell.fir.opt.mlir 124:24]
    connect _rdata_WIRE_2, _rdata_T[0] @[build/NutShell.fir.opt.mlir 125:7]
    node _rdata_T_1 = bits(_rdata_WIRE_2, 0, 0) @[build/NutShell.fir.opt.mlir 127:21]
    connect rdata_0.valid, _rdata_T_1 @[build/NutShell.fir.opt.mlir 128:7]
    node _rdata_T_2 = bits(_rdata_WIRE_2, 3, 1) @[build/NutShell.fir.opt.mlir 130:21]
    connect rdata_0.brIdx, _rdata_T_2 @[build/NutShell.fir.opt.mlir 131:7]
    node _rdata_T_3 = bits(_rdata_WIRE_2, 42, 4) @[build/NutShell.fir.opt.mlir 133:21]
    connect rdata_0.target, _rdata_T_3 @[build/NutShell.fir.opt.mlir 134:7]
    node _rdata_T_4 = bits(_rdata_WIRE_2, 44, 43) @[build/NutShell.fir.opt.mlir 136:21]
    connect rdata_0._type, _rdata_T_4 @[build/NutShell.fir.opt.mlir 137:7]
    node _rdata_T_5 = bits(_rdata_WIRE_2, 72, 45) @[build/NutShell.fir.opt.mlir 139:21]
    connect rdata_0.tag, _rdata_T_5 @[build/NutShell.fir.opt.mlir 140:7]
    wire _WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] @[build/NutShell.fir.opt.mlir 141:16]
    connect _WIRE[0].valid, rdata_0.valid @[build/NutShell.fir.opt.mlir 148:7]
    connect _WIRE[0].brIdx, rdata_0.brIdx @[build/NutShell.fir.opt.mlir 149:7]
    connect _WIRE[0].target, rdata_0.target @[build/NutShell.fir.opt.mlir 150:7]
    connect _WIRE[0]._type, rdata_0._type @[build/NutShell.fir.opt.mlir 151:7]
    connect _WIRE[0].tag, rdata_0.tag @[build/NutShell.fir.opt.mlir 152:7]
    connect io.r.resp.data, _WIRE @[build/NutShell.fir.opt.mlir 153:7]
    node _io_r_req_ready_T = eq(resetState, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 155:28]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 157:30]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[build/NutShell.fir.opt.mlir 159:30]
    connect io.r.req.ready, _io_r_req_ready_T_2 @[build/NutShell.fir.opt.mlir 160:7]
    connect io.w.req.ready, UInt<1>(1) @[build/NutShell.fir.opt.mlir 162:7]
