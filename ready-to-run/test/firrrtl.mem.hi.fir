FIRRTL version 4.0.0
circuit SRAMTemplate :
  module SRAMTemplate : @[build/NutShell.fir.opt.mlir 3:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 3:44]
    input reset : Reset @[build/NutShell.fir.opt.mlir 3:70]
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9> } }, flip resp : { data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] } }, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } } } } } @[build/NutShell.fir.opt.mlir 3:97]

    mem array : @[build/NutShell.fir.opt.mlir 30:42]
      data-type => UInt<73>[1]
      depth => 512
      read-latency => 1
      write-latency => 1
      reader => rdata_MPORT
      writer => MPORT
      read-under-write => undefined
    invalidate array.MPORT.addr @[build/NutShell.fir.opt.mlir 32:7]
    connect array.MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 34:7]
    invalidate array.MPORT.clk @[build/NutShell.fir.opt.mlir 36:7]
    invalidate array.MPORT.data @[build/NutShell.fir.opt.mlir 38:7]
    invalidate array.MPORT.mask @[build/NutShell.fir.opt.mlir 40:7]
    invalidate array.rdata_MPORT.addr @[build/NutShell.fir.opt.mlir 42:7]
    connect array.rdata_MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 44:7]
    invalidate array.rdata_MPORT.clk @[build/NutShell.fir.opt.mlir 46:7]
    wire resetState : UInt<1> @[build/NutShell.fir.opt.mlir 50:21]
    connect resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 53:7]
    wire resetSet : UInt @[build/NutShell.fir.opt.mlir 54:19]
    connect resetSet, UInt<1>(0) @[build/NutShell.fir.opt.mlir 55:7]
    regreset _resetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 57:22]
    regreset _resetSet : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 59:20]
    wire resetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 60:22]
    connect resetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 62:7]
    when _resetState : @[build/NutShell.fir.opt.mlir 64:7]
      node wrap_wrap = eq(_resetSet, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 66:22]
      node _wrap_value_T = add(_resetSet, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 68:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 70:28]
      connect _resetSet, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 71:9]
      connect resetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 72:9]
    when resetFinish : @[build/NutShell.fir.opt.mlir 74:7]
      connect _resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 76:9]
    connect resetState, _resetState @[build/NutShell.fir.opt.mlir 78:7]
    connect resetSet, _resetSet @[build/NutShell.fir.opt.mlir 79:7]
    node wen = or(io.w.req.valid, resetState) @[build/NutShell.fir.opt.mlir 81:14]
    node _realRen_T = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 83:21]
    node realRen = and(io.r.req.valid, _realRen_T) @[build/NutShell.fir.opt.mlir 85:18]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[build/NutShell.fir.opt.mlir 87:17]
    wire _wdataword_WIRE : UInt<73> @[build/NutShell.fir.opt.mlir 88:26]
    connect _wdataword_WIRE, pad(UInt<1>(0), 73) @[build/NutShell.fir.opt.mlir 91:7]
    node wdataword_lo = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[build/NutShell.fir.opt.mlir 93:23]
    node wdataword_hi_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[build/NutShell.fir.opt.mlir 95:26]
    node wdataword_hi = cat(wdataword_hi_hi, io.w.req.bits.data.target) @[build/NutShell.fir.opt.mlir 97:23]
    node _wdataword_T = cat(wdataword_hi, wdataword_lo) @[build/NutShell.fir.opt.mlir 99:23]
    node wdataword = mux(resetState, _wdataword_WIRE, _wdataword_T) @[build/NutShell.fir.opt.mlir 101:20]
    node waymask = mux(resetState, UInt<1>(1), UInt<1>(1)) @[build/NutShell.fir.opt.mlir 103:18]
    wire wdata : UInt<73>[1] @[build/NutShell.fir.opt.mlir 104:16]
    connect wdata[0], wdataword @[build/NutShell.fir.opt.mlir 106:7]
    when wen : @[build/NutShell.fir.opt.mlir 107:7]
      node _T = bits(waymask, 0, 0) @[build/NutShell.fir.opt.mlir 109:15]
      node _T_1 = or(setIdx, UInt<9>(0)) @[build/NutShell.fir.opt.mlir 111:17]
      node _T_2 = bits(_T_1, 8, 0) @[build/NutShell.fir.opt.mlir 113:17]
      connect array.MPORT.addr, _T_2 @[build/NutShell.fir.opt.mlir 114:9]
      connect array.MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 115:9]
      connect array.MPORT.clk, clock @[build/NutShell.fir.opt.mlir 116:9]
      connect array.MPORT.mask[0], UInt<1>(0) @[build/NutShell.fir.opt.mlir 118:9]
      when _T : @[build/NutShell.fir.opt.mlir 119:9]
        connect array.MPORT.mask[0], UInt<1>(1) @[build/NutShell.fir.opt.mlir 120:11]
        connect array.MPORT.data[0], wdata[0] @[build/NutShell.fir.opt.mlir 121:11]
    wire _rdata_WIRE : UInt<9> @[build/NutShell.fir.opt.mlir 124:22]
    invalidate _rdata_WIRE @[build/NutShell.fir.opt.mlir 126:7]
    when realRen : @[build/NutShell.fir.opt.mlir 127:7]
      connect array.rdata_MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 128:9]
      connect _rdata_WIRE, io.r.req.bits.setIdx @[build/NutShell.fir.opt.mlir 129:9]
      connect array.rdata_MPORT.addr, _rdata_WIRE @[build/NutShell.fir.opt.mlir 130:9]
      connect array.rdata_MPORT.clk, clock @[build/NutShell.fir.opt.mlir 131:9]
    reg rdata_REG : UInt<1>, clock @[build/NutShell.fir.opt.mlir 133:20]
    connect rdata_REG, realRen @[build/NutShell.fir.opt.mlir 134:7]
    wire _rdata_WIRE_1 : UInt<73>[1] @[build/NutShell.fir.opt.mlir 135:24]
    connect _rdata_WIRE_1[0], UInt<73>(0) @[build/NutShell.fir.opt.mlir 139:7]
    regreset rdata_r : UInt<73>[1], clock, reset, _rdata_WIRE_1 @[build/NutShell.fir.opt.mlir 140:18]
    when rdata_REG : @[build/NutShell.fir.opt.mlir 141:7]
      connect rdata_r, array.rdata_MPORT.data @[build/NutShell.fir.opt.mlir 142:9]
    node _rdata_T = mux(rdata_REG, array.rdata_MPORT.data, rdata_r) @[build/NutShell.fir.opt.mlir 145:19]
    wire rdata_0 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 147:18]
    wire _rdata_WIRE_2 : UInt<73> @[build/NutShell.fir.opt.mlir 153:24]
    connect _rdata_WIRE_2, _rdata_T[0] @[build/NutShell.fir.opt.mlir 154:7]
    node _rdata_T_1 = bits(_rdata_WIRE_2, 0, 0) @[build/NutShell.fir.opt.mlir 156:21]
    connect rdata_0.valid, _rdata_T_1 @[build/NutShell.fir.opt.mlir 157:7]
    node _rdata_T_2 = bits(_rdata_WIRE_2, 3, 1) @[build/NutShell.fir.opt.mlir 159:21]
    connect rdata_0.brIdx, _rdata_T_2 @[build/NutShell.fir.opt.mlir 160:7]
    node _rdata_T_3 = bits(_rdata_WIRE_2, 42, 4) @[build/NutShell.fir.opt.mlir 162:21]
    connect rdata_0.target, _rdata_T_3 @[build/NutShell.fir.opt.mlir 163:7]
    node _rdata_T_4 = bits(_rdata_WIRE_2, 44, 43) @[build/NutShell.fir.opt.mlir 165:21]
    connect rdata_0._type, _rdata_T_4 @[build/NutShell.fir.opt.mlir 166:7]
    node _rdata_T_5 = bits(_rdata_WIRE_2, 72, 45) @[build/NutShell.fir.opt.mlir 168:21]
    connect rdata_0.tag, _rdata_T_5 @[build/NutShell.fir.opt.mlir 169:7]
    wire _WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] @[build/NutShell.fir.opt.mlir 170:16]
    connect _WIRE[0].valid, rdata_0.valid @[build/NutShell.fir.opt.mlir 177:7]
    connect _WIRE[0].brIdx, rdata_0.brIdx @[build/NutShell.fir.opt.mlir 178:7]
    connect _WIRE[0].target, rdata_0.target @[build/NutShell.fir.opt.mlir 179:7]
    connect _WIRE[0]._type, rdata_0._type @[build/NutShell.fir.opt.mlir 180:7]
    connect _WIRE[0].tag, rdata_0.tag @[build/NutShell.fir.opt.mlir 181:7]
    connect io.r.resp.data, _WIRE @[build/NutShell.fir.opt.mlir 182:7]
    node _io_r_req_ready_T = eq(resetState, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 184:28]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 186:30]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[build/NutShell.fir.opt.mlir 188:30]
    connect io.r.req.ready, _io_r_req_ready_T_2 @[build/NutShell.fir.opt.mlir 189:7]
    connect io.w.req.ready, UInt<1>(1) @[build/NutShell.fir.opt.mlir 191:7]
