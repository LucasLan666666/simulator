FIRRTL version 4.0.0
circuit FirrtlCmem :
  module SRAMTemplate : @[build/NutShell.fir.opt.mlir 3:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 3:44]
    input reset : Reset @[build/NutShell.fir.opt.mlir 3:70]
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9> } }, flip resp : { data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] } }, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } } } } } @[build/NutShell.fir.opt.mlir 3:97]

    mem array : @[build/NutShell.fir.opt.mlir 30:42]
      data-type => UInt<73>[1]
      depth => 512
      read-latency => 1
      write-latency => 1
      reader => rdata_MPORT
      writer => MPORT
      read-under-write => undefined
    invalidate array.MPORT.addr @[build/NutShell.fir.opt.mlir 32:7]
    connect array.MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 34:7]
    invalidate array.MPORT.clk @[build/NutShell.fir.opt.mlir 36:7]
    invalidate array.MPORT.data @[build/NutShell.fir.opt.mlir 38:7]
    invalidate array.MPORT.mask @[build/NutShell.fir.opt.mlir 40:7]
    invalidate array.rdata_MPORT.addr @[build/NutShell.fir.opt.mlir 42:7]
    connect array.rdata_MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 44:7]
    invalidate array.rdata_MPORT.clk @[build/NutShell.fir.opt.mlir 46:7]
    wire resetState : UInt<1> @[build/NutShell.fir.opt.mlir 50:21]
    connect resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 53:7]
    wire resetSet : UInt @[build/NutShell.fir.opt.mlir 54:19]
    connect resetSet, UInt<1>(0) @[build/NutShell.fir.opt.mlir 55:7]
    regreset _resetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 57:22]
    regreset _resetSet : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 59:20]
    wire resetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 60:22]
    connect resetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 62:7]
    when _resetState : @[build/NutShell.fir.opt.mlir 64:7]
      node wrap_wrap = eq(_resetSet, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 66:22]
      node _wrap_value_T = add(_resetSet, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 68:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 70:28]
      connect _resetSet, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 71:9]
      connect resetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 72:9]
    when resetFinish : @[build/NutShell.fir.opt.mlir 74:7]
      connect _resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 76:9]
    connect resetState, _resetState @[build/NutShell.fir.opt.mlir 78:7]
    connect resetSet, _resetSet @[build/NutShell.fir.opt.mlir 79:7]
    node wen = or(io.w.req.valid, resetState) @[build/NutShell.fir.opt.mlir 81:14]
    node _realRen_T = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 83:21]
    node realRen = and(io.r.req.valid, _realRen_T) @[build/NutShell.fir.opt.mlir 85:18]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[build/NutShell.fir.opt.mlir 87:17]
    wire _wdataword_WIRE : UInt<73> @[build/NutShell.fir.opt.mlir 88:26]
    connect _wdataword_WIRE, pad(UInt<1>(0), 73) @[build/NutShell.fir.opt.mlir 91:7]
    node wdataword_lo = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[build/NutShell.fir.opt.mlir 93:23]
    node wdataword_hi_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[build/NutShell.fir.opt.mlir 95:26]
    node wdataword_hi = cat(wdataword_hi_hi, io.w.req.bits.data.target) @[build/NutShell.fir.opt.mlir 97:23]
    node _wdataword_T = cat(wdataword_hi, wdataword_lo) @[build/NutShell.fir.opt.mlir 99:23]
    node wdataword = mux(resetState, _wdataword_WIRE, _wdataword_T) @[build/NutShell.fir.opt.mlir 101:20]
    node waymask = mux(resetState, UInt<1>(1), UInt<1>(1)) @[build/NutShell.fir.opt.mlir 103:18]
    wire wdata : UInt<73>[1] @[build/NutShell.fir.opt.mlir 104:16]
    connect wdata[0], wdataword @[build/NutShell.fir.opt.mlir 106:7]
    when wen : @[build/NutShell.fir.opt.mlir 107:7]
      node _T = bits(waymask, 0, 0) @[build/NutShell.fir.opt.mlir 109:15]
      node _T_1 = or(setIdx, UInt<9>(0)) @[build/NutShell.fir.opt.mlir 111:17]
      node _T_2 = bits(_T_1, 8, 0) @[build/NutShell.fir.opt.mlir 113:17]
      connect array.MPORT.addr, _T_2 @[build/NutShell.fir.opt.mlir 114:9]
      connect array.MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 115:9]
      connect array.MPORT.clk, clock @[build/NutShell.fir.opt.mlir 116:9]
      connect array.MPORT.mask[0], UInt<1>(0) @[build/NutShell.fir.opt.mlir 118:9]
      when _T : @[build/NutShell.fir.opt.mlir 119:9]
        connect array.MPORT.mask[0], UInt<1>(1) @[build/NutShell.fir.opt.mlir 120:11]
        connect array.MPORT.data[0], wdata[0] @[build/NutShell.fir.opt.mlir 121:11]
    wire _rdata_WIRE : UInt<9> @[build/NutShell.fir.opt.mlir 124:22]
    invalidate _rdata_WIRE @[build/NutShell.fir.opt.mlir 126:7]
    when realRen : @[build/NutShell.fir.opt.mlir 127:7]
      connect array.rdata_MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 128:9]
      connect _rdata_WIRE, io.r.req.bits.setIdx @[build/NutShell.fir.opt.mlir 129:9]
      connect array.rdata_MPORT.addr, _rdata_WIRE @[build/NutShell.fir.opt.mlir 130:9]
      connect array.rdata_MPORT.clk, clock @[build/NutShell.fir.opt.mlir 131:9]
    reg rdata_REG : UInt<1>, clock @[build/NutShell.fir.opt.mlir 133:20]
    connect rdata_REG, realRen @[build/NutShell.fir.opt.mlir 134:7]
    wire _rdata_WIRE_1 : UInt<73>[1] @[build/NutShell.fir.opt.mlir 135:24]
    connect _rdata_WIRE_1[0], UInt<73>(0) @[build/NutShell.fir.opt.mlir 139:7]
    regreset rdata_r : UInt<73>[1], clock, reset, _rdata_WIRE_1 @[build/NutShell.fir.opt.mlir 140:18]
    when rdata_REG : @[build/NutShell.fir.opt.mlir 141:7]
      connect rdata_r, array.rdata_MPORT.data @[build/NutShell.fir.opt.mlir 142:9]
    node _rdata_T = mux(rdata_REG, array.rdata_MPORT.data, rdata_r) @[build/NutShell.fir.opt.mlir 145:19]
    wire rdata_0 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 147:18]
    wire _rdata_WIRE_2 : UInt<73> @[build/NutShell.fir.opt.mlir 153:24]
    connect _rdata_WIRE_2, _rdata_T[0] @[build/NutShell.fir.opt.mlir 154:7]
    node _rdata_T_1 = bits(_rdata_WIRE_2, 0, 0) @[build/NutShell.fir.opt.mlir 156:21]
    connect rdata_0.valid, _rdata_T_1 @[build/NutShell.fir.opt.mlir 157:7]
    node _rdata_T_2 = bits(_rdata_WIRE_2, 3, 1) @[build/NutShell.fir.opt.mlir 159:21]
    connect rdata_0.brIdx, _rdata_T_2 @[build/NutShell.fir.opt.mlir 160:7]
    node _rdata_T_3 = bits(_rdata_WIRE_2, 42, 4) @[build/NutShell.fir.opt.mlir 162:21]
    connect rdata_0.target, _rdata_T_3 @[build/NutShell.fir.opt.mlir 163:7]
    node _rdata_T_4 = bits(_rdata_WIRE_2, 44, 43) @[build/NutShell.fir.opt.mlir 165:21]
    connect rdata_0._type, _rdata_T_4 @[build/NutShell.fir.opt.mlir 166:7]
    node _rdata_T_5 = bits(_rdata_WIRE_2, 72, 45) @[build/NutShell.fir.opt.mlir 168:21]
    connect rdata_0.tag, _rdata_T_5 @[build/NutShell.fir.opt.mlir 169:7]
    wire _WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] @[build/NutShell.fir.opt.mlir 170:16]
    connect _WIRE[0].valid, rdata_0.valid @[build/NutShell.fir.opt.mlir 177:7]
    connect _WIRE[0].brIdx, rdata_0.brIdx @[build/NutShell.fir.opt.mlir 178:7]
    connect _WIRE[0].target, rdata_0.target @[build/NutShell.fir.opt.mlir 179:7]
    connect _WIRE[0]._type, rdata_0._type @[build/NutShell.fir.opt.mlir 180:7]
    connect _WIRE[0].tag, rdata_0.tag @[build/NutShell.fir.opt.mlir 181:7]
    connect io.r.resp.data, _WIRE @[build/NutShell.fir.opt.mlir 182:7]
    node _io_r_req_ready_T = eq(resetState, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 184:28]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 186:30]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[build/NutShell.fir.opt.mlir 188:30]
    connect io.r.req.ready, _io_r_req_ready_T_2 @[build/NutShell.fir.opt.mlir 189:7]
    connect io.w.req.ready, UInt<1>(1) @[build/NutShell.fir.opt.mlir 191:7]

  extmodule LogPerfHelper : @[build/NutShell.fir.opt.mlir 193:5]
    output timer : UInt<64> @[build/NutShell.fir.opt.mlir 193:49]
    output logEnable : UInt<1> @[build/NutShell.fir.opt.mlir 193:78]
    output clean : UInt<1> @[build/NutShell.fir.opt.mlir 193:110]
    output dump : UInt<1> @[build/NutShell.fir.opt.mlir 193:138]
    defname = LogPerfHelper

  module FirrtlCmem : @[build/NutShell.fir.opt.mlir 194:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 194:43]
    input reset : Reset @[build/NutShell.fir.opt.mlir 194:69]
    output io : { in : { flip pc : { valid : UInt<1>, bits : UInt<39> } }, out : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1> }, flip flush : UInt<1>, brIdx : UInt<3>, crosslineJump : UInt<1> } @[build/NutShell.fir.opt.mlir 194:96]
    input req__bore : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 194:305]
    input flushTLB__bore : UInt<1> @[build/NutShell.fir.opt.mlir 194:489]
    input flushBTB__bore : UInt<1> @[build/NutShell.fir.opt.mlir 194:526]

    regreset flush : UInt<1>, clock, reset, UInt<1>(0) @[build/NutShell.fir.opt.mlir 215:16]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 216:7]
      connect flush, UInt<1>(0) @[build/NutShell.fir.opt.mlir 218:9]
    when io.flush : @[build/NutShell.fir.opt.mlir 221:7]
      connect flush, UInt<1>(1) @[build/NutShell.fir.opt.mlir 223:9]
    inst btb of SRAMTemplate @[build/NutShell.fir.opt.mlir 225:41]
    connect btb.clock, clock @[build/NutShell.fir.opt.mlir 246:7]
    connect btb.reset, reset @[build/NutShell.fir.opt.mlir 247:7]
    wire flushBTB : UInt<1> @[build/NutShell.fir.opt.mlir 248:19]
    connect flushBTB, UInt<1>(0) @[build/NutShell.fir.opt.mlir 250:7]
    wire flushTLB : UInt<1> @[build/NutShell.fir.opt.mlir 251:19]
    connect flushTLB, UInt<1>(0) @[build/NutShell.fir.opt.mlir 253:7]
    node _btb_reset_T = asUInt(reset) @[build/NutShell.fir.opt.mlir 255:23]
    node _btb_reset_T_1 = or(flushBTB, flushTLB) @[build/NutShell.fir.opt.mlir 257:25]
    node _btb_reset_T_2 = or(_btb_reset_T, _btb_reset_T_1) @[build/NutShell.fir.opt.mlir 259:25]
    connect btb.reset, _btb_reset_T_2 @[build/NutShell.fir.opt.mlir 261:7]
    node _T = asUInt(reset) @[build/NutShell.fir.opt.mlir 263:13]
    node _T_1 = or(flushBTB, flushTLB) @[build/NutShell.fir.opt.mlir 265:15]
    node _T_2 = or(_T, _T_1) @[build/NutShell.fir.opt.mlir 267:15]
    inst LogPerfHelper of LogPerfHelper @[build/NutShell.fir.opt.mlir 268:99]
    wire c_control : { timer : UInt<64>, logEnable : UInt<1>, clean : UInt<1>, dump : UInt<1> } @[build/NutShell.fir.opt.mlir 269:20]
    connect c_control.dump, LogPerfHelper.dump @[build/NutShell.fir.opt.mlir 274:7]
    connect c_control.clean, LogPerfHelper.clean @[build/NutShell.fir.opt.mlir 275:7]
    connect c_control.logEnable, LogPerfHelper.logEnable @[build/NutShell.fir.opt.mlir 276:7]
    connect c_control.timer, LogPerfHelper.timer @[build/NutShell.fir.opt.mlir 277:7]
    node _T_3 = and(_T_2, c_control.logEnable) @[build/NutShell.fir.opt.mlir 279:15]
    when _T_3 : @[build/NutShell.fir.opt.mlir 280:7]
      node _T_4 = asUInt(reset) @[build/NutShell.fir.opt.mlir 282:17]
      node _T_5 = eq(_T_4, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 284:17]
      when _T_5 : @[build/NutShell.fir.opt.mlir 285:9]
        skip @[build/NutShell.fir.opt.mlir 286:11]
      node _T_6 = asUInt(reset) @[build/NutShell.fir.opt.mlir 289:17]
      node _T_7 = eq(_T_6, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 291:17]
      when _T_7 : @[build/NutShell.fir.opt.mlir 292:9]
        skip @[build/NutShell.fir.opt.mlir 293:11]
    connect btb.io.r.req.valid, io.in.pc.valid @[build/NutShell.fir.opt.mlir 296:7]
    wire _btb_io_r_req_bits_setIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 297:41]
    connect _btb_io_r_req_bits_setIdx_WIRE, io.in.pc.bits @[build/NutShell.fir.opt.mlir 298:7]
    wire _btb_io_r_req_bits_setIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 299:43]
    wire _btb_io_r_req_bits_setIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 303:43]
    connect _btb_io_r_req_bits_setIdx_WIRE_2, _btb_io_r_req_bits_setIdx_WIRE @[build/NutShell.fir.opt.mlir 304:7]
    node _btb_io_r_req_bits_setIdx_T = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 306:38]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.pad, _btb_io_r_req_bits_setIdx_T @[build/NutShell.fir.opt.mlir 307:7]
    node _btb_io_r_req_bits_setIdx_T_1 = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 309:40]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.idx, _btb_io_r_req_bits_setIdx_T_1 @[build/NutShell.fir.opt.mlir 310:7]
    node _btb_io_r_req_bits_setIdx_T_2 = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 312:40]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.tag, _btb_io_r_req_bits_setIdx_T_2 @[build/NutShell.fir.opt.mlir 313:7]
    connect btb.io.r.req.bits.setIdx, _btb_io_r_req_bits_setIdx_WIRE_1.idx @[build/NutShell.fir.opt.mlir 314:7]
    wire btbRead : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 315:18]
    connect btbRead, btb.io.r.resp.data[0] @[build/NutShell.fir.opt.mlir 321:7]
    reg pcLatch : UInt<39>, clock @[build/NutShell.fir.opt.mlir 322:18]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 323:7]
      connect pcLatch, io.in.pc.bits @[build/NutShell.fir.opt.mlir 324:9]
    wire _btbHit_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 326:23]
    connect _btbHit_WIRE, pcLatch @[build/NutShell.fir.opt.mlir 327:7]
    wire _btbHit_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 328:25]
    wire _btbHit_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 332:25]
    connect _btbHit_WIRE_2, _btbHit_WIRE @[build/NutShell.fir.opt.mlir 333:7]
    node _btbHit_T = bits(_btbHit_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 335:20]
    connect _btbHit_WIRE_1.pad, _btbHit_T @[build/NutShell.fir.opt.mlir 336:7]
    node _btbHit_T_1 = bits(_btbHit_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 338:22]
    connect _btbHit_WIRE_1.idx, _btbHit_T_1 @[build/NutShell.fir.opt.mlir 339:7]
    node _btbHit_T_2 = bits(_btbHit_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 341:22]
    connect _btbHit_WIRE_1.tag, _btbHit_T_2 @[build/NutShell.fir.opt.mlir 342:7]
    node _btbHit_T_3 = eq(btbRead.tag, _btbHit_WIRE_1.tag) @[build/NutShell.fir.opt.mlir 344:22]
    node _btbHit_T_4 = and(btbRead.valid, _btbHit_T_3) @[build/NutShell.fir.opt.mlir 346:22]
    node _btbHit_T_5 = eq(flush, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 348:22]
    node _btbHit_T_6 = and(_btbHit_T_4, _btbHit_T_5) @[build/NutShell.fir.opt.mlir 350:22]
    regreset btbHit_REG : UInt<1>, clock, reset, UInt<1>(0) @[build/NutShell.fir.opt.mlir 351:21]
    connect btbHit_REG, btb.io.r.req.ready @[build/NutShell.fir.opt.mlir 352:7]
    node _btbHit_T_7 = and(_btbHit_T_6, btbHit_REG) @[build/NutShell.fir.opt.mlir 354:22]
    node _btbHit_T_8 = bits(pcLatch, 1, 1) @[build/NutShell.fir.opt.mlir 356:22]
    node _btbHit_T_9 = bits(btbRead.brIdx, 0, 0) @[build/NutShell.fir.opt.mlir 358:22]
    node _btbHit_T_10 = and(_btbHit_T_8, _btbHit_T_9) @[build/NutShell.fir.opt.mlir 360:23]
    node _btbHit_T_11 = eq(_btbHit_T_10, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 362:23]
    node btbHit = and(_btbHit_T_7, _btbHit_T_11) @[build/NutShell.fir.opt.mlir 364:17]
    node _crosslineJump_T = bits(btbRead.brIdx, 2, 2) @[build/NutShell.fir.opt.mlir 366:27]
    node crosslineJump = and(_crosslineJump_T, btbHit) @[build/NutShell.fir.opt.mlir 368:24]
    connect io.crosslineJump, crosslineJump @[build/NutShell.fir.opt.mlir 369:7]
    regreset c : UInt<64>, clock, reset, UInt<64>(0) @[build/NutShell.fir.opt.mlir 371:12]
    node _c_T = add(c, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 373:15]
    node _c_T_1 = tail(_c_T, 1) @[build/NutShell.fir.opt.mlir 375:17]
    connect c, _c_T_1 @[build/NutShell.fir.opt.mlir 376:7]
    wire _WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 377:16]
    connect _WIRE, pcLatch @[build/NutShell.fir.opt.mlir 378:7]
    wire _WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 379:18]
    wire _WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 383:18]
    connect _WIRE_2, _WIRE @[build/NutShell.fir.opt.mlir 384:7]
    node _T_8 = bits(_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 386:15]
    connect _WIRE_1.pad, _T_8 @[build/NutShell.fir.opt.mlir 387:7]
    node _T_9 = bits(_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 389:15]
    connect _WIRE_1.idx, _T_9 @[build/NutShell.fir.opt.mlir 390:7]
    node _T_10 = bits(_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 392:16]
    connect _WIRE_1.tag, _T_10 @[build/NutShell.fir.opt.mlir 393:7]
    wire _WIRE_3 : UInt<39> @[build/NutShell.fir.opt.mlir 394:18]
    connect _WIRE_3, pcLatch @[build/NutShell.fir.opt.mlir 395:7]
    wire _WIRE_4 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 396:18]
    wire _WIRE_5 : UInt<39> @[build/NutShell.fir.opt.mlir 400:18]
    connect _WIRE_5, _WIRE_3 @[build/NutShell.fir.opt.mlir 401:7]
    node _T_11 = bits(_WIRE_5, 1, 0) @[build/NutShell.fir.opt.mlir 403:16]
    connect _WIRE_4.pad, _T_11 @[build/NutShell.fir.opt.mlir 404:7]
    node _T_12 = bits(_WIRE_5, 10, 2) @[build/NutShell.fir.opt.mlir 406:16]
    connect _WIRE_4.idx, _T_12 @[build/NutShell.fir.opt.mlir 407:7]
    node _T_13 = bits(_WIRE_5, 38, 11) @[build/NutShell.fir.opt.mlir 409:16]
    connect _WIRE_4.tag, _T_13 @[build/NutShell.fir.opt.mlir 410:7]
    node _T_14 = and(btbHit, c_control.logEnable) @[build/NutShell.fir.opt.mlir 412:16]
    when _T_14 : @[build/NutShell.fir.opt.mlir 413:7]
      node _T_15 = asUInt(reset) @[build/NutShell.fir.opt.mlir 415:18]
      node _T_16 = eq(_T_15, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 417:18]
      when _T_16 : @[build/NutShell.fir.opt.mlir 418:9]
        skip @[build/NutShell.fir.opt.mlir 419:11]
      node _T_17 = asUInt(reset) @[build/NutShell.fir.opt.mlir 422:18]
      node _T_18 = eq(_T_17, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 424:18]
      when _T_18 : @[build/NutShell.fir.opt.mlir 425:9]
        skip @[build/NutShell.fir.opt.mlir 426:11]
    node _T_19 = mux(io.out.valid, UInt<2>(3), UInt<2>(0)) @[build/NutShell.fir.opt.mlir 432:16]
    node _T_20 = cat(crosslineJump, _T_19) @[build/NutShell.fir.opt.mlir 434:16]
    node _T_21 = and(btbHit, c_control.logEnable) @[build/NutShell.fir.opt.mlir 436:16]
    when _T_21 : @[build/NutShell.fir.opt.mlir 437:7]
      node _T_22 = asUInt(reset) @[build/NutShell.fir.opt.mlir 439:18]
      node _T_23 = eq(_T_22, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 441:18]
      when _T_23 : @[build/NutShell.fir.opt.mlir 442:9]
        skip @[build/NutShell.fir.opt.mlir 443:11]
      node _T_24 = asUInt(reset) @[build/NutShell.fir.opt.mlir 446:18]
      node _T_25 = eq(_T_24, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 448:18]
      when _T_25 : @[build/NutShell.fir.opt.mlir 449:9]
        skip @[build/NutShell.fir.opt.mlir 450:11]
    regreset phtResetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 453:24]
    regreset phtResetIdx : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 455:22]
    wire phtResetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 456:25]
    connect phtResetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 458:7]
    when phtResetState : @[build/NutShell.fir.opt.mlir 460:7]
      node wrap_wrap = eq(phtResetIdx, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 462:22]
      node _wrap_value_T = add(phtResetIdx, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 464:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 466:28]
      connect phtResetIdx, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 467:9]
      connect phtResetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 468:9]
    when phtResetFinish : @[build/NutShell.fir.opt.mlir 470:7]
      connect phtResetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 472:9]
    mem pht : @[build/NutShell.fir.opt.mlir 474:57]
      data-type => UInt<2>
      depth => 512
      read-latency => 0
      write-latency => 1
      reader => cnt_MPORT
      reader => phtTaken_MPORT
      writer => MPORT
      read-under-write => undefined
    invalidate pht.MPORT.addr @[build/NutShell.fir.opt.mlir 476:7]
    connect pht.MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 478:7]
    invalidate pht.MPORT.clk @[build/NutShell.fir.opt.mlir 480:7]
    invalidate pht.MPORT.data @[build/NutShell.fir.opt.mlir 482:7]
    invalidate pht.MPORT.mask @[build/NutShell.fir.opt.mlir 484:7]
    invalidate pht.cnt_MPORT.addr @[build/NutShell.fir.opt.mlir 486:7]
    connect pht.cnt_MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 488:7]
    invalidate pht.cnt_MPORT.clk @[build/NutShell.fir.opt.mlir 490:7]
    invalidate pht.phtTaken_MPORT.addr @[build/NutShell.fir.opt.mlir 493:7]
    connect pht.phtTaken_MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 495:7]
    invalidate pht.phtTaken_MPORT.clk @[build/NutShell.fir.opt.mlir 497:7]
    wire _phtTaken_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 499:25]
    connect _phtTaken_WIRE, io.in.pc.bits @[build/NutShell.fir.opt.mlir 500:7]
    wire _phtTaken_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 501:27]
    wire _phtTaken_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 505:27]
    connect _phtTaken_WIRE_2, _phtTaken_WIRE @[build/NutShell.fir.opt.mlir 506:7]
    node _phtTaken_T = bits(_phtTaken_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 508:22]
    connect _phtTaken_WIRE_1.pad, _phtTaken_T @[build/NutShell.fir.opt.mlir 509:7]
    node _phtTaken_T_1 = bits(_phtTaken_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 511:24]
    connect _phtTaken_WIRE_1.idx, _phtTaken_T_1 @[build/NutShell.fir.opt.mlir 512:7]
    node _phtTaken_T_2 = bits(_phtTaken_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 514:24]
    connect _phtTaken_WIRE_1.tag, _phtTaken_T_2 @[build/NutShell.fir.opt.mlir 515:7]
    connect pht.phtTaken_MPORT.addr, _phtTaken_WIRE_1.idx @[build/NutShell.fir.opt.mlir 516:7]
    connect pht.phtTaken_MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 517:7]
    connect pht.phtTaken_MPORT.clk, clock @[build/NutShell.fir.opt.mlir 518:7]
    node _phtTaken_T_3 = mux(phtResetState, UInt<1>(0), pht.phtTaken_MPORT.data) @[build/NutShell.fir.opt.mlir 520:24]
    node _phtTaken_T_4 = bits(_phtTaken_T_3, 1, 1) @[build/NutShell.fir.opt.mlir 522:24]
    reg phtTaken : UInt<1>, clock @[build/NutShell.fir.opt.mlir 523:19]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 524:7]
      connect phtTaken, _phtTaken_T_4 @[build/NutShell.fir.opt.mlir 525:9]
    regreset rasResetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 527:24]
    regreset rasResetIdx : UInt<4>, clock, reset, UInt<4>(0) @[build/NutShell.fir.opt.mlir 529:22]
    wire rasResetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 530:25]
    connect rasResetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 532:7]
    when rasResetState : @[build/NutShell.fir.opt.mlir 534:7]
      node wrap_wrap_1 = eq(rasResetIdx, UInt<4>(15)) @[build/NutShell.fir.opt.mlir 536:24]
      node _wrap_value_T_2 = add(rasResetIdx, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 538:28]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[build/NutShell.fir.opt.mlir 540:28]
      connect rasResetIdx, _wrap_value_T_3 @[build/NutShell.fir.opt.mlir 541:9]
      connect rasResetFinish, wrap_wrap_1 @[build/NutShell.fir.opt.mlir 542:9]
    when rasResetFinish : @[build/NutShell.fir.opt.mlir 544:7]
      connect rasResetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 546:9]
    mem ras : @[build/NutShell.fir.opt.mlir 548:42]
      data-type => UInt<39>
      depth => 16
      read-latency => 0
      write-latency => 1
      reader => rasRead_MPORT
      writer => MPORT_1
      read-under-write => undefined
    invalidate ras.MPORT_1.addr @[build/NutShell.fir.opt.mlir 550:7]
    connect ras.MPORT_1.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 552:7]
    invalidate ras.MPORT_1.clk @[build/NutShell.fir.opt.mlir 554:7]
    invalidate ras.MPORT_1.data @[build/NutShell.fir.opt.mlir 556:7]
    invalidate ras.MPORT_1.mask @[build/NutShell.fir.opt.mlir 558:7]
    invalidate ras.rasRead_MPORT.addr @[build/NutShell.fir.opt.mlir 560:7]
    connect ras.rasRead_MPORT.en, UInt<1>(0) @[build/NutShell.fir.opt.mlir 562:7]
    invalidate ras.rasRead_MPORT.clk @[build/NutShell.fir.opt.mlir 564:7]
    regreset sp_value : UInt<4>, clock, reset, UInt<4>(0) @[build/NutShell.fir.opt.mlir 566:19]
    connect ras.rasRead_MPORT.addr, sp_value @[build/NutShell.fir.opt.mlir 567:7]
    connect ras.rasRead_MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 568:7]
    connect ras.rasRead_MPORT.clk, clock @[build/NutShell.fir.opt.mlir 569:7]
    node rasRead = mux(rasResetState, UInt<1>(0), ras.rasRead_MPORT.data) @[build/NutShell.fir.opt.mlir 571:18]
    reg rasTarget : UInt<39>, clock @[build/NutShell.fir.opt.mlir 572:20]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 573:7]
      connect rasTarget, rasRead @[build/NutShell.fir.opt.mlir 574:9]
    wire _req_WIRE : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 576:20]
    connect _req_WIRE.isRVC, UInt<1>(0) @[build/NutShell.fir.opt.mlir 586:7]
    connect _req_WIRE.btbType, UInt<2>(0) @[build/NutShell.fir.opt.mlir 588:7]
    connect _req_WIRE.fuOpType, UInt<7>(0) @[build/NutShell.fir.opt.mlir 591:7]
    connect _req_WIRE.actualTaken, UInt<1>(0) @[build/NutShell.fir.opt.mlir 593:7]
    connect _req_WIRE.actualTarget, UInt<39>(0) @[build/NutShell.fir.opt.mlir 596:7]
    connect _req_WIRE.isMissPredict, UInt<1>(0) @[build/NutShell.fir.opt.mlir 598:7]
    connect _req_WIRE.pc, UInt<39>(0) @[build/NutShell.fir.opt.mlir 600:7]
    connect _req_WIRE.valid, UInt<1>(0) @[build/NutShell.fir.opt.mlir 602:7]
    wire req : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 603:14]
    connect req, _req_WIRE @[build/NutShell.fir.opt.mlir 611:7]
    wire _btbWrite_WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 612:25]
    connect _btbWrite_WIRE.valid, UInt<1>(0) @[build/NutShell.fir.opt.mlir 619:7]
    connect _btbWrite_WIRE.brIdx, UInt<3>(0) @[build/NutShell.fir.opt.mlir 622:7]
    connect _btbWrite_WIRE.target, UInt<39>(0) @[build/NutShell.fir.opt.mlir 624:7]
    connect _btbWrite_WIRE._type, UInt<2>(0) @[build/NutShell.fir.opt.mlir 626:7]
    connect _btbWrite_WIRE.tag, UInt<28>(0) @[build/NutShell.fir.opt.mlir 629:7]
    wire btbWrite : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 630:19]
    connect btbWrite, _btbWrite_WIRE @[build/NutShell.fir.opt.mlir 636:7]
    wire _WIRE_6 : UInt<39> @[build/NutShell.fir.opt.mlir 637:18]
    connect _WIRE_6, req.pc @[build/NutShell.fir.opt.mlir 638:7]
    wire _WIRE_7 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 639:18]
    wire _WIRE_8 : UInt<39> @[build/NutShell.fir.opt.mlir 643:18]
    connect _WIRE_8, _WIRE_6 @[build/NutShell.fir.opt.mlir 644:7]
    node _T_26 = bits(_WIRE_8, 1, 0) @[build/NutShell.fir.opt.mlir 646:16]
    connect _WIRE_7.pad, _T_26 @[build/NutShell.fir.opt.mlir 647:7]
    node _T_27 = bits(_WIRE_8, 10, 2) @[build/NutShell.fir.opt.mlir 649:16]
    connect _WIRE_7.idx, _T_27 @[build/NutShell.fir.opt.mlir 650:7]
    node _T_28 = bits(_WIRE_8, 38, 11) @[build/NutShell.fir.opt.mlir 652:16]
    connect _WIRE_7.tag, _T_28 @[build/NutShell.fir.opt.mlir 653:7]
    wire _WIRE_9 : UInt<39> @[build/NutShell.fir.opt.mlir 654:18]
    connect _WIRE_9, req.pc @[build/NutShell.fir.opt.mlir 655:7]
    wire _WIRE_10 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 656:19]
    wire _WIRE_11 : UInt<39> @[build/NutShell.fir.opt.mlir 660:19]
    connect _WIRE_11, _WIRE_9 @[build/NutShell.fir.opt.mlir 661:7]
    node _T_29 = bits(_WIRE_11, 1, 0) @[build/NutShell.fir.opt.mlir 663:16]
    connect _WIRE_10.pad, _T_29 @[build/NutShell.fir.opt.mlir 664:7]
    node _T_30 = bits(_WIRE_11, 10, 2) @[build/NutShell.fir.opt.mlir 666:16]
    connect _WIRE_10.idx, _T_30 @[build/NutShell.fir.opt.mlir 667:7]
    node _T_31 = bits(_WIRE_11, 38, 11) @[build/NutShell.fir.opt.mlir 669:16]
    connect _WIRE_10.tag, _T_31 @[build/NutShell.fir.opt.mlir 670:7]
    node _T_32 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 672:16]
    node _T_33 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 674:16]
    node _T_34 = not(_T_33) @[build/NutShell.fir.opt.mlir 676:16]
    node _T_35 = cat(_T_32, _T_34) @[build/NutShell.fir.opt.mlir 678:16]
    node _T_36 = and(req.valid, c_control.logEnable) @[build/NutShell.fir.opt.mlir 680:16]
    when _T_36 : @[build/NutShell.fir.opt.mlir 681:7]
      node _T_37 = asUInt(reset) @[build/NutShell.fir.opt.mlir 683:18]
      node _T_38 = eq(_T_37, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 685:18]
      when _T_38 : @[build/NutShell.fir.opt.mlir 686:9]
        skip @[build/NutShell.fir.opt.mlir 687:11]
      node _T_39 = asUInt(reset) @[build/NutShell.fir.opt.mlir 690:18]
      node _T_40 = eq(_T_39, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 692:18]
      when _T_40 : @[build/NutShell.fir.opt.mlir 693:9]
        skip @[build/NutShell.fir.opt.mlir 694:11]
    wire _btbWrite_tag_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 697:29]
    connect _btbWrite_tag_WIRE, req.pc @[build/NutShell.fir.opt.mlir 698:7]
    wire _btbWrite_tag_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 699:31]
    wire _btbWrite_tag_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 703:31]
    connect _btbWrite_tag_WIRE_2, _btbWrite_tag_WIRE @[build/NutShell.fir.opt.mlir 704:7]
    node _btbWrite_tag_T = bits(_btbWrite_tag_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 706:26]
    connect _btbWrite_tag_WIRE_1.pad, _btbWrite_tag_T @[build/NutShell.fir.opt.mlir 707:7]
    node _btbWrite_tag_T_1 = bits(_btbWrite_tag_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 709:28]
    connect _btbWrite_tag_WIRE_1.idx, _btbWrite_tag_T_1 @[build/NutShell.fir.opt.mlir 710:7]
    node _btbWrite_tag_T_2 = bits(_btbWrite_tag_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 712:28]
    connect _btbWrite_tag_WIRE_1.tag, _btbWrite_tag_T_2 @[build/NutShell.fir.opt.mlir 713:7]
    connect btbWrite.tag, _btbWrite_tag_WIRE_1.tag @[build/NutShell.fir.opt.mlir 714:7]
    connect btbWrite.target, req.actualTarget @[build/NutShell.fir.opt.mlir 715:7]
    connect btbWrite._type, req.btbType @[build/NutShell.fir.opt.mlir 716:7]
    node _btbWrite_brIdx_T = bits(req.pc, 2, 0) @[build/NutShell.fir.opt.mlir 718:28]
    node _btbWrite_brIdx_T_1 = eq(_btbWrite_brIdx_T, UInt<3>(6)) @[build/NutShell.fir.opt.mlir 721:30]
    node _btbWrite_brIdx_T_2 = eq(req.isRVC, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 723:30]
    node _btbWrite_brIdx_T_3 = and(_btbWrite_brIdx_T_1, _btbWrite_brIdx_T_2) @[build/NutShell.fir.opt.mlir 725:30]
    node _btbWrite_brIdx_T_4 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 727:30]
    node _btbWrite_brIdx_T_5 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 729:30]
    node _btbWrite_brIdx_T_6 = not(_btbWrite_brIdx_T_5) @[build/NutShell.fir.opt.mlir 731:30]
    node btbWrite_brIdx_hi = cat(_btbWrite_brIdx_T_3, _btbWrite_brIdx_T_4) @[build/NutShell.fir.opt.mlir 733:28]
    node _btbWrite_brIdx_T_7 = cat(btbWrite_brIdx_hi, _btbWrite_brIdx_T_6) @[build/NutShell.fir.opt.mlir 735:30]
    connect btbWrite.brIdx, _btbWrite_brIdx_T_7 @[build/NutShell.fir.opt.mlir 736:7]
    connect btbWrite.valid, UInt<1>(1) @[build/NutShell.fir.opt.mlir 738:7]
    node _btb_io_w_req_valid_T = and(req.isMissPredict, req.valid) @[build/NutShell.fir.opt.mlir 740:32]
    connect btb.io.w.req.valid, _btb_io_w_req_valid_T @[build/NutShell.fir.opt.mlir 741:7]
    wire _btb_io_w_req_bits_setIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 742:41]
    connect _btb_io_w_req_bits_setIdx_WIRE, req.pc @[build/NutShell.fir.opt.mlir 743:7]
    wire _btb_io_w_req_bits_setIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 744:43]
    wire _btb_io_w_req_bits_setIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 748:43]
    connect _btb_io_w_req_bits_setIdx_WIRE_2, _btb_io_w_req_bits_setIdx_WIRE @[build/NutShell.fir.opt.mlir 749:7]
    node _btb_io_w_req_bits_setIdx_T = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 751:38]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.pad, _btb_io_w_req_bits_setIdx_T @[build/NutShell.fir.opt.mlir 752:7]
    node _btb_io_w_req_bits_setIdx_T_1 = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 754:40]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.idx, _btb_io_w_req_bits_setIdx_T_1 @[build/NutShell.fir.opt.mlir 755:7]
    node _btb_io_w_req_bits_setIdx_T_2 = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 757:40]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.tag, _btb_io_w_req_bits_setIdx_T_2 @[build/NutShell.fir.opt.mlir 758:7]
    connect btb.io.w.req.bits.setIdx, _btb_io_w_req_bits_setIdx_WIRE_1.idx @[build/NutShell.fir.opt.mlir 759:7]
    connect btb.io.w.req.bits.data.valid, btbWrite.valid @[build/NutShell.fir.opt.mlir 760:7]
    connect btb.io.w.req.bits.data.brIdx, btbWrite.brIdx @[build/NutShell.fir.opt.mlir 761:7]
    connect btb.io.w.req.bits.data.target, btbWrite.target @[build/NutShell.fir.opt.mlir 762:7]
    connect btb.io.w.req.bits.data._type, btbWrite._type @[build/NutShell.fir.opt.mlir 763:7]
    connect btb.io.w.req.bits.data.tag, btbWrite.tag @[build/NutShell.fir.opt.mlir 764:7]
    wire _cnt_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 765:20]
    connect _cnt_WIRE, req.pc @[build/NutShell.fir.opt.mlir 766:7]
    wire _cnt_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 767:22]
    wire _cnt_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 771:22]
    connect _cnt_WIRE_2, _cnt_WIRE @[build/NutShell.fir.opt.mlir 772:7]
    node _cnt_T = bits(_cnt_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 774:17]
    connect _cnt_WIRE_1.pad, _cnt_T @[build/NutShell.fir.opt.mlir 775:7]
    node _cnt_T_1 = bits(_cnt_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 777:19]
    connect _cnt_WIRE_1.idx, _cnt_T_1 @[build/NutShell.fir.opt.mlir 778:7]
    node _cnt_T_2 = bits(_cnt_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 780:19]
    connect _cnt_WIRE_1.tag, _cnt_T_2 @[build/NutShell.fir.opt.mlir 781:7]
    connect pht.cnt_MPORT.addr, _cnt_WIRE_1.idx @[build/NutShell.fir.opt.mlir 782:7]
    connect pht.cnt_MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 783:7]
    connect pht.cnt_MPORT.clk, clock @[build/NutShell.fir.opt.mlir 784:7]
    node _cnt_T_3 = mux(phtResetState, UInt<1>(0), pht.cnt_MPORT.data) @[build/NutShell.fir.opt.mlir 786:19]
    reg cnt : UInt, clock @[build/NutShell.fir.opt.mlir 787:14]
    connect cnt, _cnt_T_3 @[build/NutShell.fir.opt.mlir 788:7]
    reg reqLatch : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> }, clock @[build/NutShell.fir.opt.mlir 789:19]
    connect reqLatch, req @[build/NutShell.fir.opt.mlir 794:7]
    node _newCnt_T = add(cnt, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 796:20]
    node _newCnt_T_1 = tail(_newCnt_T, 1) @[build/NutShell.fir.opt.mlir 798:22]
    node _newCnt_T_2 = sub(cnt, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 800:22]
    node _newCnt_T_3 = tail(_newCnt_T_2, 1) @[build/NutShell.fir.opt.mlir 802:22]
    node newCnt = mux(reqLatch.actualTaken, _newCnt_T_1, _newCnt_T_3) @[build/NutShell.fir.opt.mlir 804:17]
    node _phtWen_T = neq(cnt, UInt<2>(3)) @[build/NutShell.fir.opt.mlir 806:20]
    node _phtWen_T_1 = and(reqLatch.actualTaken, _phtWen_T) @[build/NutShell.fir.opt.mlir 808:22]
    node _phtWen_T_2 = eq(reqLatch.actualTaken, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 810:22]
    node _phtWen_T_3 = neq(cnt, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 812:22]
    node _phtWen_T_4 = and(_phtWen_T_2, _phtWen_T_3) @[build/NutShell.fir.opt.mlir 814:22]
    node phtWen = or(_phtWen_T_1, _phtWen_T_4) @[build/NutShell.fir.opt.mlir 816:17]
    wire _phtIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 817:23]
    connect _phtIdx_WIRE, reqLatch.pc @[build/NutShell.fir.opt.mlir 818:7]
    wire _phtIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 819:25]
    wire _phtIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 823:25]
    connect _phtIdx_WIRE_2, _phtIdx_WIRE @[build/NutShell.fir.opt.mlir 824:7]
    node _phtIdx_T = bits(_phtIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 826:20]
    connect _phtIdx_WIRE_1.pad, _phtIdx_T @[build/NutShell.fir.opt.mlir 827:7]
    node _phtIdx_T_1 = bits(_phtIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 829:22]
    connect _phtIdx_WIRE_1.idx, _phtIdx_T_1 @[build/NutShell.fir.opt.mlir 830:7]
    node _phtIdx_T_2 = bits(_phtIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 832:22]
    connect _phtIdx_WIRE_1.tag, _phtIdx_T_2 @[build/NutShell.fir.opt.mlir 833:7]
    node phtIdx = mux(phtResetState, phtResetIdx, _phtIdx_WIRE_1.idx) @[build/NutShell.fir.opt.mlir 835:17]
    node phtWdata = mux(phtResetState, UInt<1>(0), newCnt) @[build/NutShell.fir.opt.mlir 837:19]
    node _phtRealWen_T = bits(reqLatch.fuOpType, 3, 3) @[build/NutShell.fir.opt.mlir 839:24]
    node _phtRealWen_T_1 = eq(_phtRealWen_T, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 841:26]
    node _phtRealWen_T_2 = and(reqLatch.valid, _phtRealWen_T_1) @[build/NutShell.fir.opt.mlir 843:26]
    node _phtRealWen_T_3 = and(_phtRealWen_T_2, phtWen) @[build/NutShell.fir.opt.mlir 845:26]
    node phtRealWen = or(phtResetState, _phtRealWen_T_3) @[build/NutShell.fir.opt.mlir 847:21]
    when phtRealWen : @[build/NutShell.fir.opt.mlir 848:7]
      connect pht.MPORT.addr, phtIdx @[build/NutShell.fir.opt.mlir 849:9]
      connect pht.MPORT.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 850:9]
      connect pht.MPORT.clk, clock @[build/NutShell.fir.opt.mlir 851:9]
      connect pht.MPORT.mask, UInt<1>(0) @[build/NutShell.fir.opt.mlir 852:9]
      connect pht.MPORT.mask, UInt<1>(1) @[build/NutShell.fir.opt.mlir 853:9]
      connect pht.MPORT.data, phtWdata @[build/NutShell.fir.opt.mlir 854:9]
    node _rasIdx_T = add(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 857:20]
    node _rasIdx_T_1 = tail(_rasIdx_T, 1) @[build/NutShell.fir.opt.mlir 859:22]
    node rasIdx = mux(rasResetState, rasResetIdx, _rasIdx_T_1) @[build/NutShell.fir.opt.mlir 861:17]
    node _rasWdata_T = mux(req.isRVC, UInt<2>(2), UInt<3>(4)) @[build/NutShell.fir.opt.mlir 865:22]
    node _rasWdata_T_1 = add(req.pc, _rasWdata_T) @[build/NutShell.fir.opt.mlir 867:24]
    node _rasWdata_T_2 = tail(_rasWdata_T_1, 1) @[build/NutShell.fir.opt.mlir 869:24]
    node rasWdata = mux(rasResetState, UInt<1>(0), _rasWdata_T_2) @[build/NutShell.fir.opt.mlir 871:19]
    node _rasWen_T = eq(req.fuOpType, UInt<7>(92)) @[build/NutShell.fir.opt.mlir 874:20]
    node _rasWen_T_1 = and(req.valid, _rasWen_T) @[build/NutShell.fir.opt.mlir 876:22]
    node rasWen = or(rasResetState, _rasWen_T_1) @[build/NutShell.fir.opt.mlir 878:17]
    when rasWen : @[build/NutShell.fir.opt.mlir 879:7]
      connect ras.MPORT_1.addr, rasIdx @[build/NutShell.fir.opt.mlir 880:9]
      connect ras.MPORT_1.en, UInt<1>(1) @[build/NutShell.fir.opt.mlir 881:9]
      connect ras.MPORT_1.clk, clock @[build/NutShell.fir.opt.mlir 882:9]
      connect ras.MPORT_1.mask, UInt<1>(0) @[build/NutShell.fir.opt.mlir 883:9]
      connect ras.MPORT_1.mask, UInt<1>(1) @[build/NutShell.fir.opt.mlir 884:9]
      connect ras.MPORT_1.data, rasWdata @[build/NutShell.fir.opt.mlir 885:9]
    when req.valid : @[build/NutShell.fir.opt.mlir 888:7]
      node _T_41 = eq(req.fuOpType, UInt<7>(92)) @[build/NutShell.fir.opt.mlir 890:18]
      when _T_41 : @[build/NutShell.fir.opt.mlir 891:9]
        node _value_T = add(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 893:23]
        node _value_T_1 = tail(_value_T, 1) @[build/NutShell.fir.opt.mlir 895:25]
        connect sp_value, _value_T_1 @[build/NutShell.fir.opt.mlir 896:11]
      else :
        node _T_42 = eq(req.fuOpType, UInt<7>(94)) @[build/NutShell.fir.opt.mlir 899:20]
        when _T_42 : @[build/NutShell.fir.opt.mlir 900:11]
          node _value_T_2 = sub(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 902:27]
          node _value_T_3 = tail(_value_T_2, 1) @[build/NutShell.fir.opt.mlir 904:27]
          connect sp_value, _value_T_3 @[build/NutShell.fir.opt.mlir 905:13]
    node _io_out_target_T = eq(btbRead._type, UInt<2>(3)) @[build/NutShell.fir.opt.mlir 910:27]
    node _io_out_target_T_1 = mux(_io_out_target_T, rasTarget, btbRead.target) @[build/NutShell.fir.opt.mlir 912:29]
    connect io.out.target, _io_out_target_T_1 @[build/NutShell.fir.opt.mlir 913:7]
    node _io_brIdx_T = mux(io.out.valid, UInt<2>(3), UInt<2>(0)) @[build/NutShell.fir.opt.mlir 915:22]
    node io_brIdx_hi = cat(UInt<1>(1), crosslineJump) @[build/NutShell.fir.opt.mlir 917:22]
    node _io_brIdx_T_1 = cat(io_brIdx_hi, _io_brIdx_T) @[build/NutShell.fir.opt.mlir 919:24]
    node _io_brIdx_T_2 = and(btbRead.brIdx, _io_brIdx_T_1) @[build/NutShell.fir.opt.mlir 921:24]
    connect io.brIdx, tail(_io_brIdx_T_2, 1) @[build/NutShell.fir.opt.mlir 923:7]
    node _io_out_valid_T = eq(btbRead._type, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 925:26]
    node _io_out_valid_T_1 = neq(rasTarget, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 927:28]
    node _io_out_valid_T_2 = and(UInt<1>(1), _io_out_valid_T_1) @[build/NutShell.fir.opt.mlir 929:28]
    node _io_out_valid_T_3 = mux(_io_out_valid_T, phtTaken, _io_out_valid_T_2) @[build/NutShell.fir.opt.mlir 931:28]
    node _io_out_valid_T_4 = and(btbHit, _io_out_valid_T_3) @[build/NutShell.fir.opt.mlir 933:28]
    connect io.out.valid, _io_out_valid_T_4 @[build/NutShell.fir.opt.mlir 934:7]
    connect io.out.rtype, UInt<1>(0) @[build/NutShell.fir.opt.mlir 936:7]
    connect req, req__bore @[build/NutShell.fir.opt.mlir 937:7]
    connect flushTLB, flushTLB__bore @[build/NutShell.fir.opt.mlir 938:7]
    connect flushBTB, flushBTB__bore @[build/NutShell.fir.opt.mlir 939:7]
