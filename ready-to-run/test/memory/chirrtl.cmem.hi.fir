FIRRTL version 4.0.0
circuit ChirrtlCmem :
  module SRAMTemplate : @[build/NutShell.fir.opt.mlir 3:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 3:44]
    input reset : Reset @[build/NutShell.fir.opt.mlir 3:70]
    output io : { flip r : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9> } }, flip resp : { data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] } }, flip w : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { setIdx : UInt<9>, data : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } } } } } @[build/NutShell.fir.opt.mlir 3:97]

    smem array : UInt<73>[1][512], undefined @[build/NutShell.fir.opt.mlir 24:16]
    wire resetState : UInt<1> @[build/NutShell.fir.opt.mlir 28:21]
    connect resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 31:7]
    wire resetSet : UInt @[build/NutShell.fir.opt.mlir 32:19]
    connect resetSet, UInt<1>(0) @[build/NutShell.fir.opt.mlir 33:7]
    regreset _resetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 35:22]
    regreset _resetSet : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 37:20]
    wire resetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 38:22]
    connect resetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 40:7]
    when _resetState : @[build/NutShell.fir.opt.mlir 42:7]
      node wrap_wrap = eq(_resetSet, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 44:22]
      node _wrap_value_T = add(_resetSet, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 46:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 48:28]
      connect _resetSet, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 49:9]
      connect resetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 50:9]
    when resetFinish : @[build/NutShell.fir.opt.mlir 52:7]
      connect _resetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 54:9]
    connect resetState, _resetState @[build/NutShell.fir.opt.mlir 56:7]
    connect resetSet, _resetSet @[build/NutShell.fir.opt.mlir 57:7]
    node wen = or(io.w.req.valid, resetState) @[build/NutShell.fir.opt.mlir 59:14]
    node _realRen_T = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 61:21]
    node realRen = and(io.r.req.valid, _realRen_T) @[build/NutShell.fir.opt.mlir 63:18]
    node setIdx = mux(resetState, resetSet, io.w.req.bits.setIdx) @[build/NutShell.fir.opt.mlir 65:17]
    wire _wdataword_WIRE : UInt<73> @[build/NutShell.fir.opt.mlir 66:26]
    connect _wdataword_WIRE, pad(UInt<1>(0), 73) @[build/NutShell.fir.opt.mlir 69:7]
    node wdataword_lo = cat(io.w.req.bits.data.brIdx, io.w.req.bits.data.valid) @[build/NutShell.fir.opt.mlir 71:23]
    node wdataword_hi_hi = cat(io.w.req.bits.data.tag, io.w.req.bits.data._type) @[build/NutShell.fir.opt.mlir 73:26]
    node wdataword_hi = cat(wdataword_hi_hi, io.w.req.bits.data.target) @[build/NutShell.fir.opt.mlir 75:23]
    node _wdataword_T = cat(wdataword_hi, wdataword_lo) @[build/NutShell.fir.opt.mlir 77:23]
    node wdataword = mux(resetState, _wdataword_WIRE, _wdataword_T) @[build/NutShell.fir.opt.mlir 79:20]
    node waymask = mux(resetState, UInt<1>(1), UInt<1>(1)) @[build/NutShell.fir.opt.mlir 81:18]
    wire wdata : UInt<73>[1] @[build/NutShell.fir.opt.mlir 82:16]
    connect wdata[0], wdataword @[build/NutShell.fir.opt.mlir 84:7]
    when wen : @[build/NutShell.fir.opt.mlir 85:7]
      node _T = bits(waymask, 0, 0) @[build/NutShell.fir.opt.mlir 87:15]
      node _T_1 = or(setIdx, UInt<9>(0)) @[build/NutShell.fir.opt.mlir 89:17]
      node _T_2 = bits(_T_1, 8, 0) @[build/NutShell.fir.opt.mlir 91:17]
      write mport MPORT = array[_T_2], clock @[build/NutShell.fir.opt.mlir 92:9]
      when _T : @[build/NutShell.fir.opt.mlir 93:9]
        connect MPORT[0], wdata[0] @[build/NutShell.fir.opt.mlir 94:11]
    wire _rdata_WIRE : UInt<9> @[build/NutShell.fir.opt.mlir 97:22]
    invalidate _rdata_WIRE @[build/NutShell.fir.opt.mlir 99:7]
    when realRen : @[build/NutShell.fir.opt.mlir 100:7]
      connect _rdata_WIRE, io.r.req.bits.setIdx @[build/NutShell.fir.opt.mlir 101:9]
      read mport rdata_MPORT = array[_rdata_WIRE], clock @[build/NutShell.fir.opt.mlir 102:9]
    reg rdata_REG : UInt<1>, clock @[build/NutShell.fir.opt.mlir 104:20]
    connect rdata_REG, realRen @[build/NutShell.fir.opt.mlir 105:7]
    wire _rdata_WIRE_1 : UInt<73>[1] @[build/NutShell.fir.opt.mlir 106:24]
    connect _rdata_WIRE_1[0], UInt<73>(0) @[build/NutShell.fir.opt.mlir 110:7]
    regreset rdata_r : UInt<73>[1], clock, reset, _rdata_WIRE_1 @[build/NutShell.fir.opt.mlir 111:18]
    when rdata_REG : @[build/NutShell.fir.opt.mlir 112:7]
      connect rdata_r, rdata_MPORT @[build/NutShell.fir.opt.mlir 113:9]
    node _rdata_T = mux(rdata_REG, rdata_MPORT, rdata_r) @[build/NutShell.fir.opt.mlir 116:19]
    wire rdata_0 : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 118:18]
    wire _rdata_WIRE_2 : UInt<73> @[build/NutShell.fir.opt.mlir 124:24]
    connect _rdata_WIRE_2, _rdata_T[0] @[build/NutShell.fir.opt.mlir 125:7]
    node _rdata_T_1 = bits(_rdata_WIRE_2, 0, 0) @[build/NutShell.fir.opt.mlir 127:21]
    connect rdata_0.valid, _rdata_T_1 @[build/NutShell.fir.opt.mlir 128:7]
    node _rdata_T_2 = bits(_rdata_WIRE_2, 3, 1) @[build/NutShell.fir.opt.mlir 130:21]
    connect rdata_0.brIdx, _rdata_T_2 @[build/NutShell.fir.opt.mlir 131:7]
    node _rdata_T_3 = bits(_rdata_WIRE_2, 42, 4) @[build/NutShell.fir.opt.mlir 133:21]
    connect rdata_0.target, _rdata_T_3 @[build/NutShell.fir.opt.mlir 134:7]
    node _rdata_T_4 = bits(_rdata_WIRE_2, 44, 43) @[build/NutShell.fir.opt.mlir 136:21]
    connect rdata_0._type, _rdata_T_4 @[build/NutShell.fir.opt.mlir 137:7]
    node _rdata_T_5 = bits(_rdata_WIRE_2, 72, 45) @[build/NutShell.fir.opt.mlir 139:21]
    connect rdata_0.tag, _rdata_T_5 @[build/NutShell.fir.opt.mlir 140:7]
    wire _WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> }[1] @[build/NutShell.fir.opt.mlir 141:16]
    connect _WIRE[0].valid, rdata_0.valid @[build/NutShell.fir.opt.mlir 148:7]
    connect _WIRE[0].brIdx, rdata_0.brIdx @[build/NutShell.fir.opt.mlir 149:7]
    connect _WIRE[0].target, rdata_0.target @[build/NutShell.fir.opt.mlir 150:7]
    connect _WIRE[0]._type, rdata_0._type @[build/NutShell.fir.opt.mlir 151:7]
    connect _WIRE[0].tag, rdata_0.tag @[build/NutShell.fir.opt.mlir 152:7]
    connect io.r.resp.data, _WIRE @[build/NutShell.fir.opt.mlir 153:7]
    node _io_r_req_ready_T = eq(resetState, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 155:28]
    node _io_r_req_ready_T_1 = eq(wen, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 157:30]
    node _io_r_req_ready_T_2 = and(_io_r_req_ready_T, _io_r_req_ready_T_1) @[build/NutShell.fir.opt.mlir 159:30]
    connect io.r.req.ready, _io_r_req_ready_T_2 @[build/NutShell.fir.opt.mlir 160:7]
    connect io.w.req.ready, UInt<1>(1) @[build/NutShell.fir.opt.mlir 162:7]

  extmodule LogPerfHelper : @[build/NutShell.fir.opt.mlir 164:5]
    output timer : UInt<64> @[build/NutShell.fir.opt.mlir 164:49]
    output logEnable : UInt<1> @[build/NutShell.fir.opt.mlir 164:78]
    output clean : UInt<1> @[build/NutShell.fir.opt.mlir 164:110]
    output dump : UInt<1> @[build/NutShell.fir.opt.mlir 164:138]
    defname = LogPerfHelper

  module ChirrtlCmem : @[build/NutShell.fir.opt.mlir 165:5]
    input clock : Clock @[build/NutShell.fir.opt.mlir 165:43]
    input reset : Reset @[build/NutShell.fir.opt.mlir 165:69]
    output io : { in : { flip pc : { valid : UInt<1>, bits : UInt<39> } }, out : { target : UInt<39>, rtype : UInt<1>, valid : UInt<1> }, flip flush : UInt<1>, brIdx : UInt<3>, crosslineJump : UInt<1> } @[build/NutShell.fir.opt.mlir 165:96]
    input req__bore : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 165:305]
    input flushTLB__bore : UInt<1> @[build/NutShell.fir.opt.mlir 165:489]
    input flushBTB__bore : UInt<1> @[build/NutShell.fir.opt.mlir 165:526]

    regreset flush : UInt<1>, clock, reset, UInt<1>(0) @[build/NutShell.fir.opt.mlir 178:16]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 179:7]
      connect flush, UInt<1>(0) @[build/NutShell.fir.opt.mlir 181:9]
    when io.flush : @[build/NutShell.fir.opt.mlir 184:7]
      connect flush, UInt<1>(1) @[build/NutShell.fir.opt.mlir 186:9]
    inst btb of SRAMTemplate @[build/NutShell.fir.opt.mlir 188:41]
    connect btb.clock, clock @[build/NutShell.fir.opt.mlir 209:7]
    connect btb.reset, reset @[build/NutShell.fir.opt.mlir 210:7]
    wire flushBTB : UInt<1> @[build/NutShell.fir.opt.mlir 211:19]
    connect flushBTB, UInt<1>(0) @[build/NutShell.fir.opt.mlir 213:7]
    wire flushTLB : UInt<1> @[build/NutShell.fir.opt.mlir 214:19]
    connect flushTLB, UInt<1>(0) @[build/NutShell.fir.opt.mlir 216:7]
    node _btb_reset_T = asUInt(reset) @[build/NutShell.fir.opt.mlir 218:23]
    node _btb_reset_T_1 = or(flushBTB, flushTLB) @[build/NutShell.fir.opt.mlir 220:25]
    node _btb_reset_T_2 = or(_btb_reset_T, _btb_reset_T_1) @[build/NutShell.fir.opt.mlir 222:25]
    connect btb.reset, _btb_reset_T_2 @[build/NutShell.fir.opt.mlir 224:7]
    node _T = asUInt(reset) @[build/NutShell.fir.opt.mlir 226:13]
    node _T_1 = or(flushBTB, flushTLB) @[build/NutShell.fir.opt.mlir 228:15]
    node _T_2 = or(_T, _T_1) @[build/NutShell.fir.opt.mlir 230:15]
    inst LogPerfHelper of LogPerfHelper @[build/NutShell.fir.opt.mlir 231:99]
    wire c_control : { timer : UInt<64>, logEnable : UInt<1>, clean : UInt<1>, dump : UInt<1> } @[build/NutShell.fir.opt.mlir 232:20]
    connect c_control.dump, LogPerfHelper.dump @[build/NutShell.fir.opt.mlir 237:7]
    connect c_control.clean, LogPerfHelper.clean @[build/NutShell.fir.opt.mlir 238:7]
    connect c_control.logEnable, LogPerfHelper.logEnable @[build/NutShell.fir.opt.mlir 239:7]
    connect c_control.timer, LogPerfHelper.timer @[build/NutShell.fir.opt.mlir 240:7]
    node _T_3 = and(_T_2, c_control.logEnable) @[build/NutShell.fir.opt.mlir 242:15]
    when _T_3 : @[build/NutShell.fir.opt.mlir 243:7]
      node _T_4 = asUInt(reset) @[build/NutShell.fir.opt.mlir 245:17]
      node _T_5 = eq(_T_4, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 247:17]
      when _T_5 : @[build/NutShell.fir.opt.mlir 248:9]
        skip @[build/NutShell.fir.opt.mlir 249:11]
      node _T_6 = asUInt(reset) @[build/NutShell.fir.opt.mlir 252:17]
      node _T_7 = eq(_T_6, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 254:17]
      when _T_7 : @[build/NutShell.fir.opt.mlir 255:9]
        skip @[build/NutShell.fir.opt.mlir 256:11]
    connect btb.io.r.req.valid, io.in.pc.valid @[build/NutShell.fir.opt.mlir 259:7]
    wire _btb_io_r_req_bits_setIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 260:41]
    connect _btb_io_r_req_bits_setIdx_WIRE, io.in.pc.bits @[build/NutShell.fir.opt.mlir 261:7]
    wire _btb_io_r_req_bits_setIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 262:43]
    wire _btb_io_r_req_bits_setIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 266:43]
    connect _btb_io_r_req_bits_setIdx_WIRE_2, _btb_io_r_req_bits_setIdx_WIRE @[build/NutShell.fir.opt.mlir 267:7]
    node _btb_io_r_req_bits_setIdx_T = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 269:38]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.pad, _btb_io_r_req_bits_setIdx_T @[build/NutShell.fir.opt.mlir 270:7]
    node _btb_io_r_req_bits_setIdx_T_1 = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 272:40]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.idx, _btb_io_r_req_bits_setIdx_T_1 @[build/NutShell.fir.opt.mlir 273:7]
    node _btb_io_r_req_bits_setIdx_T_2 = bits(_btb_io_r_req_bits_setIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 275:40]
    connect _btb_io_r_req_bits_setIdx_WIRE_1.tag, _btb_io_r_req_bits_setIdx_T_2 @[build/NutShell.fir.opt.mlir 276:7]
    connect btb.io.r.req.bits.setIdx, _btb_io_r_req_bits_setIdx_WIRE_1.idx @[build/NutShell.fir.opt.mlir 277:7]
    wire btbRead : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 278:18]
    connect btbRead, btb.io.r.resp.data[0] @[build/NutShell.fir.opt.mlir 284:7]
    reg pcLatch : UInt<39>, clock @[build/NutShell.fir.opt.mlir 285:18]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 286:7]
      connect pcLatch, io.in.pc.bits @[build/NutShell.fir.opt.mlir 287:9]
    wire _btbHit_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 289:23]
    connect _btbHit_WIRE, pcLatch @[build/NutShell.fir.opt.mlir 290:7]
    wire _btbHit_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 291:25]
    wire _btbHit_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 295:25]
    connect _btbHit_WIRE_2, _btbHit_WIRE @[build/NutShell.fir.opt.mlir 296:7]
    node _btbHit_T = bits(_btbHit_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 298:20]
    connect _btbHit_WIRE_1.pad, _btbHit_T @[build/NutShell.fir.opt.mlir 299:7]
    node _btbHit_T_1 = bits(_btbHit_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 301:22]
    connect _btbHit_WIRE_1.idx, _btbHit_T_1 @[build/NutShell.fir.opt.mlir 302:7]
    node _btbHit_T_2 = bits(_btbHit_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 304:22]
    connect _btbHit_WIRE_1.tag, _btbHit_T_2 @[build/NutShell.fir.opt.mlir 305:7]
    node _btbHit_T_3 = eq(btbRead.tag, _btbHit_WIRE_1.tag) @[build/NutShell.fir.opt.mlir 307:22]
    node _btbHit_T_4 = and(btbRead.valid, _btbHit_T_3) @[build/NutShell.fir.opt.mlir 309:22]
    node _btbHit_T_5 = eq(flush, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 311:22]
    node _btbHit_T_6 = and(_btbHit_T_4, _btbHit_T_5) @[build/NutShell.fir.opt.mlir 313:22]
    regreset btbHit_REG : UInt<1>, clock, reset, UInt<1>(0) @[build/NutShell.fir.opt.mlir 314:21]
    connect btbHit_REG, btb.io.r.req.ready @[build/NutShell.fir.opt.mlir 315:7]
    node _btbHit_T_7 = and(_btbHit_T_6, btbHit_REG) @[build/NutShell.fir.opt.mlir 317:22]
    node _btbHit_T_8 = bits(pcLatch, 1, 1) @[build/NutShell.fir.opt.mlir 319:22]
    node _btbHit_T_9 = bits(btbRead.brIdx, 0, 0) @[build/NutShell.fir.opt.mlir 321:22]
    node _btbHit_T_10 = and(_btbHit_T_8, _btbHit_T_9) @[build/NutShell.fir.opt.mlir 323:23]
    node _btbHit_T_11 = eq(_btbHit_T_10, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 325:23]
    node btbHit = and(_btbHit_T_7, _btbHit_T_11) @[build/NutShell.fir.opt.mlir 327:17]
    node _crosslineJump_T = bits(btbRead.brIdx, 2, 2) @[build/NutShell.fir.opt.mlir 329:27]
    node crosslineJump = and(_crosslineJump_T, btbHit) @[build/NutShell.fir.opt.mlir 331:24]
    connect io.crosslineJump, crosslineJump @[build/NutShell.fir.opt.mlir 332:7]
    regreset c : UInt<64>, clock, reset, UInt<64>(0) @[build/NutShell.fir.opt.mlir 334:12]
    node _c_T = add(c, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 336:15]
    node _c_T_1 = tail(_c_T, 1) @[build/NutShell.fir.opt.mlir 338:17]
    connect c, _c_T_1 @[build/NutShell.fir.opt.mlir 339:7]
    wire _WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 340:16]
    connect _WIRE, pcLatch @[build/NutShell.fir.opt.mlir 341:7]
    wire _WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 342:18]
    wire _WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 346:18]
    connect _WIRE_2, _WIRE @[build/NutShell.fir.opt.mlir 347:7]
    node _T_8 = bits(_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 349:15]
    connect _WIRE_1.pad, _T_8 @[build/NutShell.fir.opt.mlir 350:7]
    node _T_9 = bits(_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 352:15]
    connect _WIRE_1.idx, _T_9 @[build/NutShell.fir.opt.mlir 353:7]
    node _T_10 = bits(_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 355:16]
    connect _WIRE_1.tag, _T_10 @[build/NutShell.fir.opt.mlir 356:7]
    wire _WIRE_3 : UInt<39> @[build/NutShell.fir.opt.mlir 357:18]
    connect _WIRE_3, pcLatch @[build/NutShell.fir.opt.mlir 358:7]
    wire _WIRE_4 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 359:18]
    wire _WIRE_5 : UInt<39> @[build/NutShell.fir.opt.mlir 363:18]
    connect _WIRE_5, _WIRE_3 @[build/NutShell.fir.opt.mlir 364:7]
    node _T_11 = bits(_WIRE_5, 1, 0) @[build/NutShell.fir.opt.mlir 366:16]
    connect _WIRE_4.pad, _T_11 @[build/NutShell.fir.opt.mlir 367:7]
    node _T_12 = bits(_WIRE_5, 10, 2) @[build/NutShell.fir.opt.mlir 369:16]
    connect _WIRE_4.idx, _T_12 @[build/NutShell.fir.opt.mlir 370:7]
    node _T_13 = bits(_WIRE_5, 38, 11) @[build/NutShell.fir.opt.mlir 372:16]
    connect _WIRE_4.tag, _T_13 @[build/NutShell.fir.opt.mlir 373:7]
    node _T_14 = and(btbHit, c_control.logEnable) @[build/NutShell.fir.opt.mlir 375:16]
    when _T_14 : @[build/NutShell.fir.opt.mlir 376:7]
      node _T_15 = asUInt(reset) @[build/NutShell.fir.opt.mlir 378:18]
      node _T_16 = eq(_T_15, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 380:18]
      when _T_16 : @[build/NutShell.fir.opt.mlir 381:9]
        skip @[build/NutShell.fir.opt.mlir 382:11]
      node _T_17 = asUInt(reset) @[build/NutShell.fir.opt.mlir 385:18]
      node _T_18 = eq(_T_17, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 387:18]
      when _T_18 : @[build/NutShell.fir.opt.mlir 388:9]
        skip @[build/NutShell.fir.opt.mlir 389:11]
    node _T_19 = mux(io.out.valid, UInt<2>(3), UInt<2>(0)) @[build/NutShell.fir.opt.mlir 395:16]
    node _T_20 = cat(crosslineJump, _T_19) @[build/NutShell.fir.opt.mlir 397:16]
    node _T_21 = and(btbHit, c_control.logEnable) @[build/NutShell.fir.opt.mlir 399:16]
    when _T_21 : @[build/NutShell.fir.opt.mlir 400:7]
      node _T_22 = asUInt(reset) @[build/NutShell.fir.opt.mlir 402:18]
      node _T_23 = eq(_T_22, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 404:18]
      when _T_23 : @[build/NutShell.fir.opt.mlir 405:9]
        skip @[build/NutShell.fir.opt.mlir 406:11]
      node _T_24 = asUInt(reset) @[build/NutShell.fir.opt.mlir 409:18]
      node _T_25 = eq(_T_24, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 411:18]
      when _T_25 : @[build/NutShell.fir.opt.mlir 412:9]
        skip @[build/NutShell.fir.opt.mlir 413:11]
    regreset phtResetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 416:24]
    regreset phtResetIdx : UInt<9>, clock, reset, UInt<9>(0) @[build/NutShell.fir.opt.mlir 418:22]
    wire phtResetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 419:25]
    connect phtResetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 421:7]
    when phtResetState : @[build/NutShell.fir.opt.mlir 423:7]
      node wrap_wrap = eq(phtResetIdx, UInt<9>(511)) @[build/NutShell.fir.opt.mlir 425:22]
      node _wrap_value_T = add(phtResetIdx, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 427:26]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[build/NutShell.fir.opt.mlir 429:28]
      connect phtResetIdx, _wrap_value_T_1 @[build/NutShell.fir.opt.mlir 430:9]
      connect phtResetFinish, wrap_wrap @[build/NutShell.fir.opt.mlir 431:9]
    when phtResetFinish : @[build/NutShell.fir.opt.mlir 433:7]
      connect phtResetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 435:9]
    cmem pht : UInt<2>[512] @[build/NutShell.fir.opt.mlir 437:14]
    wire _phtTaken_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 441:25]
    connect _phtTaken_WIRE, io.in.pc.bits @[build/NutShell.fir.opt.mlir 442:7]
    wire _phtTaken_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 443:27]
    wire _phtTaken_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 447:27]
    connect _phtTaken_WIRE_2, _phtTaken_WIRE @[build/NutShell.fir.opt.mlir 448:7]
    node _phtTaken_T = bits(_phtTaken_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 450:22]
    connect _phtTaken_WIRE_1.pad, _phtTaken_T @[build/NutShell.fir.opt.mlir 451:7]
    node _phtTaken_T_1 = bits(_phtTaken_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 453:24]
    connect _phtTaken_WIRE_1.idx, _phtTaken_T_1 @[build/NutShell.fir.opt.mlir 454:7]
    node _phtTaken_T_2 = bits(_phtTaken_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 456:24]
    connect _phtTaken_WIRE_1.tag, _phtTaken_T_2 @[build/NutShell.fir.opt.mlir 457:7]
    read mport phtTaken_MPORT = pht[_phtTaken_WIRE_1.idx], clock @[build/NutShell.fir.opt.mlir 458:7]
    node _phtTaken_T_3 = mux(phtResetState, UInt<1>(0), phtTaken_MPORT) @[build/NutShell.fir.opt.mlir 460:24]
    node _phtTaken_T_4 = bits(_phtTaken_T_3, 1, 1) @[build/NutShell.fir.opt.mlir 462:24]
    reg phtTaken : UInt<1>, clock @[build/NutShell.fir.opt.mlir 463:19]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 464:7]
      connect phtTaken, _phtTaken_T_4 @[build/NutShell.fir.opt.mlir 465:9]
    regreset rasResetState : UInt<1>, clock, reset, UInt<1>(1) @[build/NutShell.fir.opt.mlir 467:24]
    regreset rasResetIdx : UInt<4>, clock, reset, UInt<4>(0) @[build/NutShell.fir.opt.mlir 469:22]
    wire rasResetFinish : UInt<1> @[build/NutShell.fir.opt.mlir 470:25]
    connect rasResetFinish, UInt<1>(0) @[build/NutShell.fir.opt.mlir 472:7]
    when rasResetState : @[build/NutShell.fir.opt.mlir 474:7]
      node wrap_wrap_1 = eq(rasResetIdx, UInt<4>(15)) @[build/NutShell.fir.opt.mlir 476:24]
      node _wrap_value_T_2 = add(rasResetIdx, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 478:28]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[build/NutShell.fir.opt.mlir 480:28]
      connect rasResetIdx, _wrap_value_T_3 @[build/NutShell.fir.opt.mlir 481:9]
      connect rasResetFinish, wrap_wrap_1 @[build/NutShell.fir.opt.mlir 482:9]
    when rasResetFinish : @[build/NutShell.fir.opt.mlir 484:7]
      connect rasResetState, UInt<1>(0) @[build/NutShell.fir.opt.mlir 486:9]
    cmem ras : UInt<39>[16] @[build/NutShell.fir.opt.mlir 488:14]
    regreset sp_value : UInt<4>, clock, reset, UInt<4>(0) @[build/NutShell.fir.opt.mlir 491:19]
    read mport rasRead_MPORT = ras[sp_value], clock @[build/NutShell.fir.opt.mlir 492:7]
    node rasRead = mux(rasResetState, UInt<1>(0), rasRead_MPORT) @[build/NutShell.fir.opt.mlir 494:18]
    reg rasTarget : UInt<39>, clock @[build/NutShell.fir.opt.mlir 495:20]
    when io.in.pc.valid : @[build/NutShell.fir.opt.mlir 496:7]
      connect rasTarget, rasRead @[build/NutShell.fir.opt.mlir 497:9]
    wire _req_WIRE : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 499:20]
    connect _req_WIRE.isRVC, UInt<1>(0) @[build/NutShell.fir.opt.mlir 509:7]
    connect _req_WIRE.btbType, UInt<2>(0) @[build/NutShell.fir.opt.mlir 511:7]
    connect _req_WIRE.fuOpType, UInt<7>(0) @[build/NutShell.fir.opt.mlir 514:7]
    connect _req_WIRE.actualTaken, UInt<1>(0) @[build/NutShell.fir.opt.mlir 516:7]
    connect _req_WIRE.actualTarget, UInt<39>(0) @[build/NutShell.fir.opt.mlir 519:7]
    connect _req_WIRE.isMissPredict, UInt<1>(0) @[build/NutShell.fir.opt.mlir 521:7]
    connect _req_WIRE.pc, UInt<39>(0) @[build/NutShell.fir.opt.mlir 523:7]
    connect _req_WIRE.valid, UInt<1>(0) @[build/NutShell.fir.opt.mlir 525:7]
    wire req : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> } @[build/NutShell.fir.opt.mlir 526:14]
    connect req, _req_WIRE @[build/NutShell.fir.opt.mlir 534:7]
    wire _btbWrite_WIRE : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 535:25]
    connect _btbWrite_WIRE.valid, UInt<1>(0) @[build/NutShell.fir.opt.mlir 542:7]
    connect _btbWrite_WIRE.brIdx, UInt<3>(0) @[build/NutShell.fir.opt.mlir 545:7]
    connect _btbWrite_WIRE.target, UInt<39>(0) @[build/NutShell.fir.opt.mlir 547:7]
    connect _btbWrite_WIRE._type, UInt<2>(0) @[build/NutShell.fir.opt.mlir 549:7]
    connect _btbWrite_WIRE.tag, UInt<28>(0) @[build/NutShell.fir.opt.mlir 552:7]
    wire btbWrite : { tag : UInt<28>, _type : UInt<2>, target : UInt<39>, brIdx : UInt<3>, valid : UInt<1> } @[build/NutShell.fir.opt.mlir 553:19]
    connect btbWrite, _btbWrite_WIRE @[build/NutShell.fir.opt.mlir 559:7]
    wire _WIRE_6 : UInt<39> @[build/NutShell.fir.opt.mlir 560:18]
    connect _WIRE_6, req.pc @[build/NutShell.fir.opt.mlir 561:7]
    wire _WIRE_7 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 562:18]
    wire _WIRE_8 : UInt<39> @[build/NutShell.fir.opt.mlir 566:18]
    connect _WIRE_8, _WIRE_6 @[build/NutShell.fir.opt.mlir 567:7]
    node _T_26 = bits(_WIRE_8, 1, 0) @[build/NutShell.fir.opt.mlir 569:16]
    connect _WIRE_7.pad, _T_26 @[build/NutShell.fir.opt.mlir 570:7]
    node _T_27 = bits(_WIRE_8, 10, 2) @[build/NutShell.fir.opt.mlir 572:16]
    connect _WIRE_7.idx, _T_27 @[build/NutShell.fir.opt.mlir 573:7]
    node _T_28 = bits(_WIRE_8, 38, 11) @[build/NutShell.fir.opt.mlir 575:16]
    connect _WIRE_7.tag, _T_28 @[build/NutShell.fir.opt.mlir 576:7]
    wire _WIRE_9 : UInt<39> @[build/NutShell.fir.opt.mlir 577:18]
    connect _WIRE_9, req.pc @[build/NutShell.fir.opt.mlir 578:7]
    wire _WIRE_10 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 579:19]
    wire _WIRE_11 : UInt<39> @[build/NutShell.fir.opt.mlir 583:19]
    connect _WIRE_11, _WIRE_9 @[build/NutShell.fir.opt.mlir 584:7]
    node _T_29 = bits(_WIRE_11, 1, 0) @[build/NutShell.fir.opt.mlir 586:16]
    connect _WIRE_10.pad, _T_29 @[build/NutShell.fir.opt.mlir 587:7]
    node _T_30 = bits(_WIRE_11, 10, 2) @[build/NutShell.fir.opt.mlir 589:16]
    connect _WIRE_10.idx, _T_30 @[build/NutShell.fir.opt.mlir 590:7]
    node _T_31 = bits(_WIRE_11, 38, 11) @[build/NutShell.fir.opt.mlir 592:16]
    connect _WIRE_10.tag, _T_31 @[build/NutShell.fir.opt.mlir 593:7]
    node _T_32 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 595:16]
    node _T_33 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 597:16]
    node _T_34 = not(_T_33) @[build/NutShell.fir.opt.mlir 599:16]
    node _T_35 = cat(_T_32, _T_34) @[build/NutShell.fir.opt.mlir 601:16]
    node _T_36 = and(req.valid, c_control.logEnable) @[build/NutShell.fir.opt.mlir 603:16]
    when _T_36 : @[build/NutShell.fir.opt.mlir 604:7]
      node _T_37 = asUInt(reset) @[build/NutShell.fir.opt.mlir 606:18]
      node _T_38 = eq(_T_37, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 608:18]
      when _T_38 : @[build/NutShell.fir.opt.mlir 609:9]
        skip @[build/NutShell.fir.opt.mlir 610:11]
      node _T_39 = asUInt(reset) @[build/NutShell.fir.opt.mlir 613:18]
      node _T_40 = eq(_T_39, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 615:18]
      when _T_40 : @[build/NutShell.fir.opt.mlir 616:9]
        skip @[build/NutShell.fir.opt.mlir 617:11]
    wire _btbWrite_tag_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 620:29]
    connect _btbWrite_tag_WIRE, req.pc @[build/NutShell.fir.opt.mlir 621:7]
    wire _btbWrite_tag_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 622:31]
    wire _btbWrite_tag_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 626:31]
    connect _btbWrite_tag_WIRE_2, _btbWrite_tag_WIRE @[build/NutShell.fir.opt.mlir 627:7]
    node _btbWrite_tag_T = bits(_btbWrite_tag_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 629:26]
    connect _btbWrite_tag_WIRE_1.pad, _btbWrite_tag_T @[build/NutShell.fir.opt.mlir 630:7]
    node _btbWrite_tag_T_1 = bits(_btbWrite_tag_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 632:28]
    connect _btbWrite_tag_WIRE_1.idx, _btbWrite_tag_T_1 @[build/NutShell.fir.opt.mlir 633:7]
    node _btbWrite_tag_T_2 = bits(_btbWrite_tag_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 635:28]
    connect _btbWrite_tag_WIRE_1.tag, _btbWrite_tag_T_2 @[build/NutShell.fir.opt.mlir 636:7]
    connect btbWrite.tag, _btbWrite_tag_WIRE_1.tag @[build/NutShell.fir.opt.mlir 637:7]
    connect btbWrite.target, req.actualTarget @[build/NutShell.fir.opt.mlir 638:7]
    connect btbWrite._type, req.btbType @[build/NutShell.fir.opt.mlir 639:7]
    node _btbWrite_brIdx_T = bits(req.pc, 2, 0) @[build/NutShell.fir.opt.mlir 641:28]
    node _btbWrite_brIdx_T_1 = eq(_btbWrite_brIdx_T, UInt<3>(6)) @[build/NutShell.fir.opt.mlir 644:30]
    node _btbWrite_brIdx_T_2 = eq(req.isRVC, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 646:30]
    node _btbWrite_brIdx_T_3 = and(_btbWrite_brIdx_T_1, _btbWrite_brIdx_T_2) @[build/NutShell.fir.opt.mlir 648:30]
    node _btbWrite_brIdx_T_4 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 650:30]
    node _btbWrite_brIdx_T_5 = bits(req.pc, 1, 1) @[build/NutShell.fir.opt.mlir 652:30]
    node _btbWrite_brIdx_T_6 = not(_btbWrite_brIdx_T_5) @[build/NutShell.fir.opt.mlir 654:30]
    node btbWrite_brIdx_hi = cat(_btbWrite_brIdx_T_3, _btbWrite_brIdx_T_4) @[build/NutShell.fir.opt.mlir 656:28]
    node _btbWrite_brIdx_T_7 = cat(btbWrite_brIdx_hi, _btbWrite_brIdx_T_6) @[build/NutShell.fir.opt.mlir 658:30]
    connect btbWrite.brIdx, _btbWrite_brIdx_T_7 @[build/NutShell.fir.opt.mlir 659:7]
    connect btbWrite.valid, UInt<1>(1) @[build/NutShell.fir.opt.mlir 661:7]
    node _btb_io_w_req_valid_T = and(req.isMissPredict, req.valid) @[build/NutShell.fir.opt.mlir 663:32]
    connect btb.io.w.req.valid, _btb_io_w_req_valid_T @[build/NutShell.fir.opt.mlir 664:7]
    wire _btb_io_w_req_bits_setIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 665:41]
    connect _btb_io_w_req_bits_setIdx_WIRE, req.pc @[build/NutShell.fir.opt.mlir 666:7]
    wire _btb_io_w_req_bits_setIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 667:43]
    wire _btb_io_w_req_bits_setIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 671:43]
    connect _btb_io_w_req_bits_setIdx_WIRE_2, _btb_io_w_req_bits_setIdx_WIRE @[build/NutShell.fir.opt.mlir 672:7]
    node _btb_io_w_req_bits_setIdx_T = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 674:38]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.pad, _btb_io_w_req_bits_setIdx_T @[build/NutShell.fir.opt.mlir 675:7]
    node _btb_io_w_req_bits_setIdx_T_1 = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 677:40]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.idx, _btb_io_w_req_bits_setIdx_T_1 @[build/NutShell.fir.opt.mlir 678:7]
    node _btb_io_w_req_bits_setIdx_T_2 = bits(_btb_io_w_req_bits_setIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 680:40]
    connect _btb_io_w_req_bits_setIdx_WIRE_1.tag, _btb_io_w_req_bits_setIdx_T_2 @[build/NutShell.fir.opt.mlir 681:7]
    connect btb.io.w.req.bits.setIdx, _btb_io_w_req_bits_setIdx_WIRE_1.idx @[build/NutShell.fir.opt.mlir 682:7]
    connect btb.io.w.req.bits.data.valid, btbWrite.valid @[build/NutShell.fir.opt.mlir 683:7]
    connect btb.io.w.req.bits.data.brIdx, btbWrite.brIdx @[build/NutShell.fir.opt.mlir 684:7]
    connect btb.io.w.req.bits.data.target, btbWrite.target @[build/NutShell.fir.opt.mlir 685:7]
    connect btb.io.w.req.bits.data._type, btbWrite._type @[build/NutShell.fir.opt.mlir 686:7]
    connect btb.io.w.req.bits.data.tag, btbWrite.tag @[build/NutShell.fir.opt.mlir 687:7]
    wire _cnt_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 688:20]
    connect _cnt_WIRE, req.pc @[build/NutShell.fir.opt.mlir 689:7]
    wire _cnt_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 690:22]
    wire _cnt_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 694:22]
    connect _cnt_WIRE_2, _cnt_WIRE @[build/NutShell.fir.opt.mlir 695:7]
    node _cnt_T = bits(_cnt_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 697:17]
    connect _cnt_WIRE_1.pad, _cnt_T @[build/NutShell.fir.opt.mlir 698:7]
    node _cnt_T_1 = bits(_cnt_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 700:19]
    connect _cnt_WIRE_1.idx, _cnt_T_1 @[build/NutShell.fir.opt.mlir 701:7]
    node _cnt_T_2 = bits(_cnt_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 703:19]
    connect _cnt_WIRE_1.tag, _cnt_T_2 @[build/NutShell.fir.opt.mlir 704:7]
    read mport cnt_MPORT = pht[_cnt_WIRE_1.idx], clock @[build/NutShell.fir.opt.mlir 705:7]
    node _cnt_T_3 = mux(phtResetState, UInt<1>(0), cnt_MPORT) @[build/NutShell.fir.opt.mlir 707:19]
    reg cnt : UInt, clock @[build/NutShell.fir.opt.mlir 708:14]
    connect cnt, _cnt_T_3 @[build/NutShell.fir.opt.mlir 709:7]
    reg reqLatch : { valid : UInt<1>, pc : UInt<39>, isMissPredict : UInt<1>, actualTarget : UInt<39>, actualTaken : UInt<1>, fuOpType : UInt<7>, btbType : UInt<2>, isRVC : UInt<1> }, clock @[build/NutShell.fir.opt.mlir 710:19]
    connect reqLatch, req @[build/NutShell.fir.opt.mlir 715:7]
    node _newCnt_T = add(cnt, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 717:20]
    node _newCnt_T_1 = tail(_newCnt_T, 1) @[build/NutShell.fir.opt.mlir 719:22]
    node _newCnt_T_2 = sub(cnt, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 721:22]
    node _newCnt_T_3 = tail(_newCnt_T_2, 1) @[build/NutShell.fir.opt.mlir 723:22]
    node newCnt = mux(reqLatch.actualTaken, _newCnt_T_1, _newCnt_T_3) @[build/NutShell.fir.opt.mlir 725:17]
    node _phtWen_T = neq(cnt, UInt<2>(3)) @[build/NutShell.fir.opt.mlir 727:20]
    node _phtWen_T_1 = and(reqLatch.actualTaken, _phtWen_T) @[build/NutShell.fir.opt.mlir 729:22]
    node _phtWen_T_2 = eq(reqLatch.actualTaken, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 731:22]
    node _phtWen_T_3 = neq(cnt, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 733:22]
    node _phtWen_T_4 = and(_phtWen_T_2, _phtWen_T_3) @[build/NutShell.fir.opt.mlir 735:22]
    node phtWen = or(_phtWen_T_1, _phtWen_T_4) @[build/NutShell.fir.opt.mlir 737:17]
    wire _phtIdx_WIRE : UInt<39> @[build/NutShell.fir.opt.mlir 738:23]
    connect _phtIdx_WIRE, reqLatch.pc @[build/NutShell.fir.opt.mlir 739:7]
    wire _phtIdx_WIRE_1 : { tag : UInt<28>, idx : UInt<9>, pad : UInt<2> } @[build/NutShell.fir.opt.mlir 740:25]
    wire _phtIdx_WIRE_2 : UInt<39> @[build/NutShell.fir.opt.mlir 744:25]
    connect _phtIdx_WIRE_2, _phtIdx_WIRE @[build/NutShell.fir.opt.mlir 745:7]
    node _phtIdx_T = bits(_phtIdx_WIRE_2, 1, 0) @[build/NutShell.fir.opt.mlir 747:20]
    connect _phtIdx_WIRE_1.pad, _phtIdx_T @[build/NutShell.fir.opt.mlir 748:7]
    node _phtIdx_T_1 = bits(_phtIdx_WIRE_2, 10, 2) @[build/NutShell.fir.opt.mlir 750:22]
    connect _phtIdx_WIRE_1.idx, _phtIdx_T_1 @[build/NutShell.fir.opt.mlir 751:7]
    node _phtIdx_T_2 = bits(_phtIdx_WIRE_2, 38, 11) @[build/NutShell.fir.opt.mlir 753:22]
    connect _phtIdx_WIRE_1.tag, _phtIdx_T_2 @[build/NutShell.fir.opt.mlir 754:7]
    node phtIdx = mux(phtResetState, phtResetIdx, _phtIdx_WIRE_1.idx) @[build/NutShell.fir.opt.mlir 756:17]
    node phtWdata = mux(phtResetState, UInt<1>(0), newCnt) @[build/NutShell.fir.opt.mlir 758:19]
    node _phtRealWen_T = bits(reqLatch.fuOpType, 3, 3) @[build/NutShell.fir.opt.mlir 760:24]
    node _phtRealWen_T_1 = eq(_phtRealWen_T, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 762:26]
    node _phtRealWen_T_2 = and(reqLatch.valid, _phtRealWen_T_1) @[build/NutShell.fir.opt.mlir 764:26]
    node _phtRealWen_T_3 = and(_phtRealWen_T_2, phtWen) @[build/NutShell.fir.opt.mlir 766:26]
    node phtRealWen = or(phtResetState, _phtRealWen_T_3) @[build/NutShell.fir.opt.mlir 768:21]
    when phtRealWen : @[build/NutShell.fir.opt.mlir 769:7]
      write mport MPORT = pht[phtIdx], clock @[build/NutShell.fir.opt.mlir 770:9]
      connect MPORT, phtWdata @[build/NutShell.fir.opt.mlir 771:9]
    node _rasIdx_T = add(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 774:20]
    node _rasIdx_T_1 = tail(_rasIdx_T, 1) @[build/NutShell.fir.opt.mlir 776:22]
    node rasIdx = mux(rasResetState, rasResetIdx, _rasIdx_T_1) @[build/NutShell.fir.opt.mlir 778:17]
    node _rasWdata_T = mux(req.isRVC, UInt<2>(2), UInt<3>(4)) @[build/NutShell.fir.opt.mlir 782:22]
    node _rasWdata_T_1 = add(req.pc, _rasWdata_T) @[build/NutShell.fir.opt.mlir 784:24]
    node _rasWdata_T_2 = tail(_rasWdata_T_1, 1) @[build/NutShell.fir.opt.mlir 786:24]
    node rasWdata = mux(rasResetState, UInt<1>(0), _rasWdata_T_2) @[build/NutShell.fir.opt.mlir 788:19]
    node _rasWen_T = eq(req.fuOpType, UInt<7>(92)) @[build/NutShell.fir.opt.mlir 791:20]
    node _rasWen_T_1 = and(req.valid, _rasWen_T) @[build/NutShell.fir.opt.mlir 793:22]
    node rasWen = or(rasResetState, _rasWen_T_1) @[build/NutShell.fir.opt.mlir 795:17]
    when rasWen : @[build/NutShell.fir.opt.mlir 796:7]
      write mport MPORT_1 = ras[rasIdx], clock @[build/NutShell.fir.opt.mlir 797:9]
      connect MPORT_1, rasWdata @[build/NutShell.fir.opt.mlir 798:9]
    when req.valid : @[build/NutShell.fir.opt.mlir 801:7]
      node _T_41 = eq(req.fuOpType, UInt<7>(92)) @[build/NutShell.fir.opt.mlir 803:18]
      when _T_41 : @[build/NutShell.fir.opt.mlir 804:9]
        node _value_T = add(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 806:23]
        node _value_T_1 = tail(_value_T, 1) @[build/NutShell.fir.opt.mlir 808:25]
        connect sp_value, _value_T_1 @[build/NutShell.fir.opt.mlir 809:11]
      else :
        node _T_42 = eq(req.fuOpType, UInt<7>(94)) @[build/NutShell.fir.opt.mlir 812:20]
        when _T_42 : @[build/NutShell.fir.opt.mlir 813:11]
          node _value_T_2 = sub(sp_value, UInt<1>(1)) @[build/NutShell.fir.opt.mlir 815:27]
          node _value_T_3 = tail(_value_T_2, 1) @[build/NutShell.fir.opt.mlir 817:27]
          connect sp_value, _value_T_3 @[build/NutShell.fir.opt.mlir 818:13]
    node _io_out_target_T = eq(btbRead._type, UInt<2>(3)) @[build/NutShell.fir.opt.mlir 823:27]
    node _io_out_target_T_1 = mux(_io_out_target_T, rasTarget, btbRead.target) @[build/NutShell.fir.opt.mlir 825:29]
    connect io.out.target, _io_out_target_T_1 @[build/NutShell.fir.opt.mlir 826:7]
    node _io_brIdx_T = mux(io.out.valid, UInt<2>(3), UInt<2>(0)) @[build/NutShell.fir.opt.mlir 828:22]
    node io_brIdx_hi = cat(UInt<1>(1), crosslineJump) @[build/NutShell.fir.opt.mlir 830:22]
    node _io_brIdx_T_1 = cat(io_brIdx_hi, _io_brIdx_T) @[build/NutShell.fir.opt.mlir 832:24]
    node _io_brIdx_T_2 = and(btbRead.brIdx, _io_brIdx_T_1) @[build/NutShell.fir.opt.mlir 834:24]
    connect io.brIdx, tail(_io_brIdx_T_2, 1) @[build/NutShell.fir.opt.mlir 836:7]
    node _io_out_valid_T = eq(btbRead._type, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 838:26]
    node _io_out_valid_T_1 = neq(rasTarget, UInt<1>(0)) @[build/NutShell.fir.opt.mlir 840:28]
    node _io_out_valid_T_2 = and(UInt<1>(1), _io_out_valid_T_1) @[build/NutShell.fir.opt.mlir 842:28]
    node _io_out_valid_T_3 = mux(_io_out_valid_T, phtTaken, _io_out_valid_T_2) @[build/NutShell.fir.opt.mlir 844:28]
    node _io_out_valid_T_4 = and(btbHit, _io_out_valid_T_3) @[build/NutShell.fir.opt.mlir 846:28]
    connect io.out.valid, _io_out_valid_T_4 @[build/NutShell.fir.opt.mlir 847:7]
    connect io.out.rtype, UInt<1>(0) @[build/NutShell.fir.opt.mlir 849:7]
    connect req, req__bore @[build/NutShell.fir.opt.mlir 850:7]
    connect flushTLB, flushTLB__bore @[build/NutShell.fir.opt.mlir 851:7]
    connect flushBTB, flushBTB__bore @[build/NutShell.fir.opt.mlir 852:7]

